
spi_interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f3c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08003ffc  08003ffc  00013ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004144  08004144  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004144  08004144  00014144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800414c  0800414c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800414c  0800414c  0001414c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004150  08004150  00014150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000010  08004164  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08004164  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf93  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d18  00000000  00000000  0002bfcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  0002dce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002e6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001405a  00000000  00000000  0002efb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4c6  00000000  00000000  0004300a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007964e  00000000  00000000  0004f4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c8b1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002210  00000000  00000000  000c8b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003fe4 	.word	0x08003fe4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003fe4 	.word	0x08003fe4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4647      	mov	r7, r8
 8000276:	b580      	push	{r7, lr}
 8000278:	0007      	movs	r7, r0
 800027a:	4699      	mov	r9, r3
 800027c:	0c3b      	lsrs	r3, r7, #16
 800027e:	469c      	mov	ip, r3
 8000280:	0413      	lsls	r3, r2, #16
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0400      	lsls	r0, r0, #16
 800028c:	0c14      	lsrs	r4, r2, #16
 800028e:	0c00      	lsrs	r0, r0, #16
 8000290:	4345      	muls	r5, r0
 8000292:	434b      	muls	r3, r1
 8000294:	4360      	muls	r0, r4
 8000296:	4361      	muls	r1, r4
 8000298:	18c0      	adds	r0, r0, r3
 800029a:	0c2c      	lsrs	r4, r5, #16
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4372      	muls	r2, r6
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	4463      	add	r3, ip
 80002b6:	042d      	lsls	r5, r5, #16
 80002b8:	0c2d      	lsrs	r5, r5, #16
 80002ba:	18c9      	adds	r1, r1, r3
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	1889      	adds	r1, r1, r2
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	469b      	mov	fp, r3
 8000302:	d433      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000304:	465a      	mov	r2, fp
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83a      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e078      	b.n	8000410 <__udivmoddi4+0x144>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e075      	b.n	8000416 <__udivmoddi4+0x14a>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e028      	b.n	8000396 <__udivmoddi4+0xca>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	2320      	movs	r3, #32
 8000370:	1a9b      	subs	r3, r3, r2
 8000372:	4652      	mov	r2, sl
 8000374:	40da      	lsrs	r2, r3
 8000376:	4641      	mov	r1, r8
 8000378:	0013      	movs	r3, r2
 800037a:	464a      	mov	r2, r9
 800037c:	408a      	lsls	r2, r1
 800037e:	0017      	movs	r7, r2
 8000380:	4642      	mov	r2, r8
 8000382:	431f      	orrs	r7, r3
 8000384:	4653      	mov	r3, sl
 8000386:	4093      	lsls	r3, r2
 8000388:	001e      	movs	r6, r3
 800038a:	42af      	cmp	r7, r5
 800038c:	d9c4      	bls.n	8000318 <__udivmoddi4+0x4c>
 800038e:	2200      	movs	r2, #0
 8000390:	2300      	movs	r3, #0
 8000392:	9200      	str	r2, [sp, #0]
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	4643      	mov	r3, r8
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0d9      	beq.n	8000350 <__udivmoddi4+0x84>
 800039c:	07fb      	lsls	r3, r7, #31
 800039e:	0872      	lsrs	r2, r6, #1
 80003a0:	431a      	orrs	r2, r3
 80003a2:	4646      	mov	r6, r8
 80003a4:	087b      	lsrs	r3, r7, #1
 80003a6:	e00e      	b.n	80003c6 <__udivmoddi4+0xfa>
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	d101      	bne.n	80003b0 <__udivmoddi4+0xe4>
 80003ac:	42a2      	cmp	r2, r4
 80003ae:	d80c      	bhi.n	80003ca <__udivmoddi4+0xfe>
 80003b0:	1aa4      	subs	r4, r4, r2
 80003b2:	419d      	sbcs	r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	1924      	adds	r4, r4, r4
 80003b8:	416d      	adcs	r5, r5
 80003ba:	2100      	movs	r1, #0
 80003bc:	3e01      	subs	r6, #1
 80003be:	1824      	adds	r4, r4, r0
 80003c0:	414d      	adcs	r5, r1
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d006      	beq.n	80003d4 <__udivmoddi4+0x108>
 80003c6:	42ab      	cmp	r3, r5
 80003c8:	d9ee      	bls.n	80003a8 <__udivmoddi4+0xdc>
 80003ca:	3e01      	subs	r6, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2e00      	cmp	r6, #0
 80003d2:	d1f8      	bne.n	80003c6 <__udivmoddi4+0xfa>
 80003d4:	9800      	ldr	r0, [sp, #0]
 80003d6:	9901      	ldr	r1, [sp, #4]
 80003d8:	465b      	mov	r3, fp
 80003da:	1900      	adds	r0, r0, r4
 80003dc:	4169      	adcs	r1, r5
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db24      	blt.n	800042c <__udivmoddi4+0x160>
 80003e2:	002b      	movs	r3, r5
 80003e4:	465a      	mov	r2, fp
 80003e6:	4644      	mov	r4, r8
 80003e8:	40d3      	lsrs	r3, r2
 80003ea:	002a      	movs	r2, r5
 80003ec:	40e2      	lsrs	r2, r4
 80003ee:	001c      	movs	r4, r3
 80003f0:	465b      	mov	r3, fp
 80003f2:	0015      	movs	r5, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db2a      	blt.n	800044e <__udivmoddi4+0x182>
 80003f8:	0026      	movs	r6, r4
 80003fa:	409e      	lsls	r6, r3
 80003fc:	0033      	movs	r3, r6
 80003fe:	0026      	movs	r6, r4
 8000400:	4647      	mov	r7, r8
 8000402:	40be      	lsls	r6, r7
 8000404:	0032      	movs	r2, r6
 8000406:	1a80      	subs	r0, r0, r2
 8000408:	4199      	sbcs	r1, r3
 800040a:	9000      	str	r0, [sp, #0]
 800040c:	9101      	str	r1, [sp, #4]
 800040e:	e79f      	b.n	8000350 <__udivmoddi4+0x84>
 8000410:	42a3      	cmp	r3, r4
 8000412:	d8bc      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000414:	e783      	b.n	800031e <__udivmoddi4+0x52>
 8000416:	4642      	mov	r2, r8
 8000418:	2320      	movs	r3, #32
 800041a:	2100      	movs	r1, #0
 800041c:	1a9b      	subs	r3, r3, r2
 800041e:	2200      	movs	r2, #0
 8000420:	9100      	str	r1, [sp, #0]
 8000422:	9201      	str	r2, [sp, #4]
 8000424:	2201      	movs	r2, #1
 8000426:	40da      	lsrs	r2, r3
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	e786      	b.n	800033a <__udivmoddi4+0x6e>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	4646      	mov	r6, r8
 8000436:	409a      	lsls	r2, r3
 8000438:	0023      	movs	r3, r4
 800043a:	40f3      	lsrs	r3, r6
 800043c:	4644      	mov	r4, r8
 800043e:	4313      	orrs	r3, r2
 8000440:	002a      	movs	r2, r5
 8000442:	40e2      	lsrs	r2, r4
 8000444:	001c      	movs	r4, r3
 8000446:	465b      	mov	r3, fp
 8000448:	0015      	movs	r5, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	dad4      	bge.n	80003f8 <__udivmoddi4+0x12c>
 800044e:	4642      	mov	r2, r8
 8000450:	002f      	movs	r7, r5
 8000452:	2320      	movs	r3, #32
 8000454:	0026      	movs	r6, r4
 8000456:	4097      	lsls	r7, r2
 8000458:	1a9b      	subs	r3, r3, r2
 800045a:	40de      	lsrs	r6, r3
 800045c:	003b      	movs	r3, r7
 800045e:	4333      	orrs	r3, r6
 8000460:	e7cd      	b.n	80003fe <__udivmoddi4+0x132>
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <handle_command>:
 *      Author: liam
 */
#include "Command_Handler.h"
#include "main.h"

void handle_command(uint8_t cmd){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	0002      	movs	r2, r0
 80004c0:	1dfb      	adds	r3, r7, #7
 80004c2:	701a      	strb	r2, [r3, #0]
	switch (cmd){
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b50      	cmp	r3, #80	; 0x50
 80004ca:	d027      	beq.n	800051c <handle_command+0x64>
 80004cc:	dc2b      	bgt.n	8000526 <handle_command+0x6e>
 80004ce:	2b40      	cmp	r3, #64	; 0x40
 80004d0:	d01f      	beq.n	8000512 <handle_command+0x5a>
 80004d2:	dc28      	bgt.n	8000526 <handle_command+0x6e>
 80004d4:	2b30      	cmp	r3, #48	; 0x30
 80004d6:	d017      	beq.n	8000508 <handle_command+0x50>
 80004d8:	dc25      	bgt.n	8000526 <handle_command+0x6e>
 80004da:	2b20      	cmp	r3, #32
 80004dc:	d00f      	beq.n	80004fe <handle_command+0x46>
 80004de:	dc22      	bgt.n	8000526 <handle_command+0x6e>
 80004e0:	2b05      	cmp	r3, #5
 80004e2:	d002      	beq.n	80004ea <handle_command+0x32>
 80004e4:	2b10      	cmp	r3, #16
 80004e6:	d005      	beq.n	80004f4 <handle_command+0x3c>
			break;
		case GET_HK:
			DBG_PUT("Get Housekeeping Command called\r\n");
			break;
	}
}
 80004e8:	e01d      	b.n	8000526 <handle_command+0x6e>
			DBG_PUT("Get Image Command called\r\n");
 80004ea:	4b11      	ldr	r3, [pc, #68]	; (8000530 <handle_command+0x78>)
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 f983 	bl	80007f8 <DBG_PUT>
			break;
 80004f2:	e018      	b.n	8000526 <handle_command+0x6e>
			DBG_PUT("Capture Command called\r\n");
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <handle_command+0x7c>)
 80004f6:	0018      	movs	r0, r3
 80004f8:	f000 f97e 	bl	80007f8 <DBG_PUT>
			break;
 80004fc:	e013      	b.n	8000526 <handle_command+0x6e>
			DBG_PUT("Count Images Command called\r\n");
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <handle_command+0x80>)
 8000500:	0018      	movs	r0, r3
 8000502:	f000 f979 	bl	80007f8 <DBG_PUT>
			break;
 8000506:	e00e      	b.n	8000526 <handle_command+0x6e>
			DBG_PUT("Sensor Idle Command called\r\n");
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <handle_command+0x84>)
 800050a:	0018      	movs	r0, r3
 800050c:	f000 f974 	bl	80007f8 <DBG_PUT>
			break;
 8000510:	e009      	b.n	8000526 <handle_command+0x6e>
			DBG_PUT("Sensor Active Command called\r\n");
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <handle_command+0x88>)
 8000514:	0018      	movs	r0, r3
 8000516:	f000 f96f 	bl	80007f8 <DBG_PUT>
			break;
 800051a:	e004      	b.n	8000526 <handle_command+0x6e>
			DBG_PUT("Get Housekeeping Command called\r\n");
 800051c:	4b09      	ldr	r3, [pc, #36]	; (8000544 <handle_command+0x8c>)
 800051e:	0018      	movs	r0, r3
 8000520:	f000 f96a 	bl	80007f8 <DBG_PUT>
			break;
 8000524:	46c0      	nop			; (mov r8, r8)
}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	46bd      	mov	sp, r7
 800052a:	b002      	add	sp, #8
 800052c:	bd80      	pop	{r7, pc}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	08003ffc 	.word	0x08003ffc
 8000534:	08004018 	.word	0x08004018
 8000538:	08004034 	.word	0x08004034
 800053c:	08004054 	.word	0x08004054
 8000540:	08004074 	.word	0x08004074
 8000544:	08004094 	.word	0x08004094

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054c:	f000 fa7e 	bl	8000a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000550:	f000 f83e 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000554:	f000 f90a 	bl	800076c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000558:	f000 f8a6 	bl	80006a8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800055c:	f000 f8d6 	bl	800070c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t receive_buffer;
  DBG_PUT("Booted Successfully\r\n");
 8000560:	4b16      	ldr	r3, [pc, #88]	; (80005bc <main+0x74>)
 8000562:	0018      	movs	r0, r3
 8000564:	f000 f948 	bl	80007f8 <DBG_PUT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		switch (state){
 8000568:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <main+0x78>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b03      	cmp	r3, #3
 800056e:	d01b      	beq.n	80005a8 <main+0x60>
 8000570:	dcfa      	bgt.n	8000568 <main+0x20>
 8000572:	2b00      	cmp	r3, #0
 8000574:	d002      	beq.n	800057c <main+0x34>
 8000576:	2b01      	cmp	r3, #1
 8000578:	d004      	beq.n	8000584 <main+0x3c>
 800057a:	e7f5      	b.n	8000568 <main+0x20>
			case idle:
				state = receiving;
 800057c:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <main+0x78>)
 800057e:	2201      	movs	r2, #1
 8000580:	701a      	strb	r2, [r3, #0]
				break;
 8000582:	e01a      	b.n	80005ba <main+0x72>
			case receiving:
				HAL_SPI_Receive(&hspi2, &RX_Data, sizeof(RX_Data), 2000);
 8000584:	23fa      	movs	r3, #250	; 0xfa
 8000586:	00db      	lsls	r3, r3, #3
 8000588:	490e      	ldr	r1, [pc, #56]	; (80005c4 <main+0x7c>)
 800058a:	480f      	ldr	r0, [pc, #60]	; (80005c8 <main+0x80>)
 800058c:	2201      	movs	r2, #1
 800058e:	f001 fda7 	bl	80020e0 <HAL_SPI_Receive>
				//HAL_SPI_Transmit(&hspi2, &TX_Data, sizeof(TX_Data), 1000);
				HAL_UART_Transmit(&huart1, &RX_Data, sizeof(RX_Data), 1000);
 8000592:	23fa      	movs	r3, #250	; 0xfa
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	490b      	ldr	r1, [pc, #44]	; (80005c4 <main+0x7c>)
 8000598:	480c      	ldr	r0, [pc, #48]	; (80005cc <main+0x84>)
 800059a:	2201      	movs	r2, #1
 800059c:	f002 fb30 	bl	8002c00 <HAL_UART_Transmit>
				state = idle;
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <main+0x78>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
				break;
 80005a6:	e008      	b.n	80005ba <main+0x72>
			case handling_command:
				handle_command(RX_Data);
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <main+0x7c>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	0018      	movs	r0, r3
 80005ae:	f7ff ff83 	bl	80004b8 <handle_command>
				state = receiving;
 80005b2:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <main+0x78>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
				break;
 80005b8:	46c0      	nop			; (mov r8, r8)
		switch (state){
 80005ba:	e7d5      	b.n	8000568 <main+0x20>
 80005bc:	080040b8 	.word	0x080040b8
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000108 	.word	0x20000108
 80005c8:	2000002c 	.word	0x2000002c
 80005cc:	20000084 	.word	0x20000084

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b09d      	sub	sp, #116	; 0x74
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	2438      	movs	r4, #56	; 0x38
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	0018      	movs	r0, r3
 80005dc:	2338      	movs	r3, #56	; 0x38
 80005de:	001a      	movs	r2, r3
 80005e0:	2100      	movs	r1, #0
 80005e2:	f003 fcf7 	bl	8003fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e6:	2324      	movs	r3, #36	; 0x24
 80005e8:	18fb      	adds	r3, r7, r3
 80005ea:	0018      	movs	r0, r3
 80005ec:	2314      	movs	r3, #20
 80005ee:	001a      	movs	r2, r3
 80005f0:	2100      	movs	r1, #0
 80005f2:	f003 fcef 	bl	8003fd4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f6:	003b      	movs	r3, r7
 80005f8:	0018      	movs	r0, r3
 80005fa:	2324      	movs	r3, #36	; 0x24
 80005fc:	001a      	movs	r2, r3
 80005fe:	2100      	movs	r1, #0
 8000600:	f003 fce8 	bl	8003fd4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a26      	ldr	r2, [pc, #152]	; (80006a4 <SystemClock_Config+0xd4>)
 800060a:	401a      	ands	r2, r3
 800060c:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <SystemClock_Config+0xd0>)
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	0109      	lsls	r1, r1, #4
 8000612:	430a      	orrs	r2, r1
 8000614:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000616:	0021      	movs	r1, r4
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2210      	movs	r2, #16
 800061c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2201      	movs	r2, #1
 8000622:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2200      	movs	r2, #0
 8000628:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	22a0      	movs	r2, #160	; 0xa0
 800062e:	0212      	lsls	r2, r2, #8
 8000630:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2200      	movs	r2, #0
 8000636:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	187b      	adds	r3, r7, r1
 800063a:	0018      	movs	r0, r3
 800063c:	f000 fd70 	bl	8001120 <HAL_RCC_OscConfig>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000644:	f000 f8ee 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	2124      	movs	r1, #36	; 0x24
 800064a:	187b      	adds	r3, r7, r1
 800064c:	220f      	movs	r2, #15
 800064e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2100      	movs	r1, #0
 800066c:	0018      	movs	r0, r3
 800066e:	f001 f91b 	bl	80018a8 <HAL_RCC_ClockConfig>
 8000672:	1e03      	subs	r3, r0, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000676:	f000 f8d5 	bl	8000824 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800067a:	003b      	movs	r3, r7
 800067c:	2201      	movs	r2, #1
 800067e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000680:	003b      	movs	r3, r7
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000686:	003b      	movs	r3, r7
 8000688:	0018      	movs	r0, r3
 800068a:	f001 fb31 	bl	8001cf0 <HAL_RCCEx_PeriphCLKConfig>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000692:	f000 f8c7 	bl	8000824 <Error_Handler>
  }
}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	b01d      	add	sp, #116	; 0x74
 800069c:	bd90      	pop	{r4, r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	40007000 	.word	0x40007000
 80006a4:	ffffe7ff 	.word	0xffffe7ff

080006a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <MX_SPI2_Init+0x5c>)
 80006ae:	4a16      	ldr	r2, [pc, #88]	; (8000708 <MX_SPI2_Init+0x60>)
 80006b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_SPI2_Init+0x5c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_SPI2_Init+0x5c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_SPI2_Init+0x5c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_SPI2_Init+0x5c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_SPI2_Init+0x5c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_SPI2_Init+0x5c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_SPI2_Init+0x5c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_SPI2_Init+0x5c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_SPI2_Init+0x5c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_SPI2_Init+0x5c>)
 80006ea:	2207      	movs	r2, #7
 80006ec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006ee:	4b05      	ldr	r3, [pc, #20]	; (8000704 <MX_SPI2_Init+0x5c>)
 80006f0:	0018      	movs	r0, r3
 80006f2:	f001 fc61 	bl	8001fb8 <HAL_SPI_Init>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 80006fa:	f000 f893 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	2000002c 	.word	0x2000002c
 8000708:	40003800 	.word	0x40003800

0800070c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000712:	4a15      	ldr	r2, [pc, #84]	; (8000768 <MX_USART1_UART_Init+0x5c>)
 8000714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000718:	22e1      	movs	r2, #225	; 0xe1
 800071a:	0252      	lsls	r2, r2, #9
 800071c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_USART1_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_USART1_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_USART1_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800074e:	4b05      	ldr	r3, [pc, #20]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000750:	0018      	movs	r0, r3
 8000752:	f002 fa01 	bl	8002b58 <HAL_UART_Init>
 8000756:	1e03      	subs	r3, r0, #0
 8000758:	d001      	beq.n	800075e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800075a:	f000 f863 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000084 	.word	0x20000084
 8000768:	40013800 	.word	0x40013800

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b089      	sub	sp, #36	; 0x24
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	240c      	movs	r4, #12
 8000774:	193b      	adds	r3, r7, r4
 8000776:	0018      	movs	r0, r3
 8000778:	2314      	movs	r3, #20
 800077a:	001a      	movs	r2, r3
 800077c:	2100      	movs	r1, #0
 800077e:	f003 fc29 	bl	8003fd4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <MX_GPIO_Init+0x88>)
 8000784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000786:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_GPIO_Init+0x88>)
 8000788:	2102      	movs	r1, #2
 800078a:	430a      	orrs	r2, r1
 800078c:	62da      	str	r2, [r3, #44]	; 0x2c
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <MX_GPIO_Init+0x88>)
 8000790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000792:	2202      	movs	r2, #2
 8000794:	4013      	ands	r3, r2
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <MX_GPIO_Init+0x88>)
 800079c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_GPIO_Init+0x88>)
 80007a0:	2101      	movs	r1, #1
 80007a2:	430a      	orrs	r2, r1
 80007a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_GPIO_Init+0x88>)
 80007a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007aa:	2201      	movs	r2, #1
 80007ac:	4013      	ands	r3, r2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS1_GPIO_Port, NSS1_Pin, GPIO_PIN_RESET);
 80007b2:	2380      	movs	r3, #128	; 0x80
 80007b4:	0059      	lsls	r1, r3, #1
 80007b6:	23a0      	movs	r3, #160	; 0xa0
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	2200      	movs	r2, #0
 80007bc:	0018      	movs	r0, r3
 80007be:	f000 fc91 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NSS1_Pin */
  GPIO_InitStruct.Pin = NSS1_Pin;
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	2280      	movs	r2, #128	; 0x80
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	2201      	movs	r2, #1
 80007ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	193b      	adds	r3, r7, r4
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NSS1_GPIO_Port, &GPIO_InitStruct);
 80007dc:	193a      	adds	r2, r7, r4
 80007de:	23a0      	movs	r3, #160	; 0xa0
 80007e0:	05db      	lsls	r3, r3, #23
 80007e2:	0011      	movs	r1, r2
 80007e4:	0018      	movs	r0, r3
 80007e6:	f000 fb07 	bl	8000df8 <HAL_GPIO_Init>

}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b009      	add	sp, #36	; 0x24
 80007f0:	bd90      	pop	{r4, r7, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	40021000 	.word	0x40021000

080007f8 <DBG_PUT>:
	char buf[64];
	sprintf(buf, "0x%x\r\n", RX_Data);
	// DBG_PUT(buf);

}
void DBG_PUT(char *str) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	// Send the receive byte from the MOSI through UART
    HAL_UART_Transmit_IT(&huart1, (uint8_t *) str, strlen(str));
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	0018      	movs	r0, r3
 8000804:	f7ff fc80 	bl	8000108 <strlen>
 8000808:	0003      	movs	r3, r0
 800080a:	b29a      	uxth	r2, r3
 800080c:	6879      	ldr	r1, [r7, #4]
 800080e:	4b04      	ldr	r3, [pc, #16]	; (8000820 <DBG_PUT+0x28>)
 8000810:	0018      	movs	r0, r3
 8000812:	f002 fa9d 	bl	8002d50 <HAL_UART_Transmit_IT>
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b002      	add	sp, #8
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	20000084 	.word	0x20000084

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0x8>
	...

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <HAL_MspInit+0x24>)
 8000836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_MspInit+0x24>)
 800083a:	2101      	movs	r1, #1
 800083c:	430a      	orrs	r2, r1
 800083e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <HAL_MspInit+0x24>)
 8000842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <HAL_MspInit+0x24>)
 8000846:	2180      	movs	r1, #128	; 0x80
 8000848:	0549      	lsls	r1, r1, #21
 800084a:	430a      	orrs	r2, r1
 800084c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40021000 	.word	0x40021000

08000858 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b089      	sub	sp, #36	; 0x24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	240c      	movs	r4, #12
 8000862:	193b      	adds	r3, r7, r4
 8000864:	0018      	movs	r0, r3
 8000866:	2314      	movs	r3, #20
 8000868:	001a      	movs	r2, r3
 800086a:	2100      	movs	r1, #0
 800086c:	f003 fbb2 	bl	8003fd4 <memset>
  if(hspi->Instance==SPI2)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <HAL_SPI_MspInit+0x90>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d131      	bne.n	80008de <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <HAL_SPI_MspInit+0x94>)
 800087c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800087e:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <HAL_SPI_MspInit+0x94>)
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	01c9      	lsls	r1, r1, #7
 8000884:	430a      	orrs	r2, r1
 8000886:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <HAL_SPI_MspInit+0x94>)
 800088a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800088c:	4b17      	ldr	r3, [pc, #92]	; (80008ec <HAL_SPI_MspInit+0x94>)
 800088e:	2102      	movs	r1, #2
 8000890:	430a      	orrs	r2, r1
 8000892:	62da      	str	r2, [r3, #44]	; 0x2c
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_SPI_MspInit+0x94>)
 8000896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000898:	2202      	movs	r2, #2
 800089a:	4013      	ands	r3, r2
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	22f0      	movs	r2, #240	; 0xf0
 80008a4:	0212      	lsls	r2, r2, #8
 80008a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	0021      	movs	r1, r4
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2202      	movs	r2, #2
 80008ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2203      	movs	r2, #3
 80008ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <HAL_SPI_MspInit+0x98>)
 80008c6:	0019      	movs	r1, r3
 80008c8:	0010      	movs	r0, r2
 80008ca:	f000 fa95 	bl	8000df8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	201a      	movs	r0, #26
 80008d4:	f000 f9d6 	bl	8000c84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80008d8:	201a      	movs	r0, #26
 80008da:	f000 f9e8 	bl	8000cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b009      	add	sp, #36	; 0x24
 80008e4:	bd90      	pop	{r4, r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	40003800 	.word	0x40003800
 80008ec:	40021000 	.word	0x40021000
 80008f0:	50000400 	.word	0x50000400

080008f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b089      	sub	sp, #36	; 0x24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	240c      	movs	r4, #12
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	0018      	movs	r0, r3
 8000902:	2314      	movs	r3, #20
 8000904:	001a      	movs	r2, r3
 8000906:	2100      	movs	r1, #0
 8000908:	f003 fb64 	bl	8003fd4 <memset>
  if(huart->Instance==USART1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a1c      	ldr	r2, [pc, #112]	; (8000984 <HAL_UART_MspInit+0x90>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d132      	bne.n	800097c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000916:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <HAL_UART_MspInit+0x94>)
 8000918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091a:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <HAL_UART_MspInit+0x94>)
 800091c:	2180      	movs	r1, #128	; 0x80
 800091e:	01c9      	lsls	r1, r1, #7
 8000920:	430a      	orrs	r2, r1
 8000922:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <HAL_UART_MspInit+0x94>)
 8000926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <HAL_UART_MspInit+0x94>)
 800092a:	2101      	movs	r1, #1
 800092c:	430a      	orrs	r2, r1
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_UART_MspInit+0x94>)
 8000932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000934:	2201      	movs	r2, #1
 8000936:	4013      	ands	r3, r2
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800093c:	193b      	adds	r3, r7, r4
 800093e:	22c0      	movs	r2, #192	; 0xc0
 8000940:	00d2      	lsls	r2, r2, #3
 8000942:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	0021      	movs	r1, r4
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2202      	movs	r2, #2
 800094a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2203      	movs	r2, #3
 8000956:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2204      	movs	r2, #4
 800095c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	187a      	adds	r2, r7, r1
 8000960:	23a0      	movs	r3, #160	; 0xa0
 8000962:	05db      	lsls	r3, r3, #23
 8000964:	0011      	movs	r1, r2
 8000966:	0018      	movs	r0, r3
 8000968:	f000 fa46 	bl	8000df8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2100      	movs	r1, #0
 8000970:	201b      	movs	r0, #27
 8000972:	f000 f987 	bl	8000c84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000976:	201b      	movs	r0, #27
 8000978:	f000 f999 	bl	8000cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b009      	add	sp, #36	; 0x24
 8000982:	bd90      	pop	{r4, r7, pc}
 8000984:	40013800 	.word	0x40013800
 8000988:	40021000 	.word	0x40021000

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <NMI_Handler+0x4>

08000992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <HardFault_Handler+0x4>

08000998 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b0:	f000 f8a0 	bl	8000af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <SPI2_IRQHandler+0x14>)
 80009c2:	0018      	movs	r0, r3
 80009c4:	f001 fe6e 	bl	80026a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	2000002c 	.word	0x2000002c

080009d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009d8:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <USART1_IRQHandler+0x14>)
 80009da:	0018      	movs	r0, r3
 80009dc:	f002 fa38 	bl	8002e50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	20000084 	.word	0x20000084

080009ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80009f8:	480d      	ldr	r0, [pc, #52]	; (8000a30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009fc:	480d      	ldr	r0, [pc, #52]	; (8000a34 <LoopForever+0x6>)
  ldr r1, =_edata
 80009fe:	490e      	ldr	r1, [pc, #56]	; (8000a38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a00:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <LoopForever+0xe>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a04:	e002      	b.n	8000a0c <LoopCopyDataInit>

08000a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0a:	3304      	adds	r3, #4

08000a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a10:	d3f9      	bcc.n	8000a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a12:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a14:	4c0b      	ldr	r4, [pc, #44]	; (8000a44 <LoopForever+0x16>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a18:	e001      	b.n	8000a1e <LoopFillZerobss>

08000a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a1c:	3204      	adds	r2, #4

08000a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a20:	d3fb      	bcc.n	8000a1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a22:	f7ff ffe3 	bl	80009ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a26:	f003 fab1 	bl	8003f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2a:	f7ff fd8d 	bl	8000548 <main>

08000a2e <LoopForever>:

LoopForever:
    b LoopForever
 8000a2e:	e7fe      	b.n	8000a2e <LoopForever>
  ldr   r0, =_estack
 8000a30:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a38:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a3c:	08004154 	.word	0x08004154
  ldr r2, =_sbss
 8000a40:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a44:	20000110 	.word	0x20000110

08000a48 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC1_COMP_IRQHandler>
	...

08000a4c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a52:	1dfb      	adds	r3, r7, #7
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <HAL_Init+0x3c>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <HAL_Init+0x3c>)
 8000a5e:	2140      	movs	r1, #64	; 0x40
 8000a60:	430a      	orrs	r2, r1
 8000a62:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 f811 	bl	8000a8c <HAL_InitTick>
 8000a6a:	1e03      	subs	r3, r0, #0
 8000a6c:	d003      	beq.n	8000a76 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	2201      	movs	r2, #1
 8000a72:	701a      	strb	r2, [r3, #0]
 8000a74:	e001      	b.n	8000a7a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a76:	f7ff fedb 	bl	8000830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
}
 8000a7e:	0018      	movs	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b002      	add	sp, #8
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	40022000 	.word	0x40022000

08000a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <HAL_InitTick+0x5c>)
 8000a96:	681c      	ldr	r4, [r3, #0]
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <HAL_InitTick+0x60>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	0019      	movs	r1, r3
 8000a9e:	23fa      	movs	r3, #250	; 0xfa
 8000aa0:	0098      	lsls	r0, r3, #2
 8000aa2:	f7ff fb39 	bl	8000118 <__udivsi3>
 8000aa6:	0003      	movs	r3, r0
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	0020      	movs	r0, r4
 8000aac:	f7ff fb34 	bl	8000118 <__udivsi3>
 8000ab0:	0003      	movs	r3, r0
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 f90b 	bl	8000cce <HAL_SYSTICK_Config>
 8000ab8:	1e03      	subs	r3, r0, #0
 8000aba:	d001      	beq.n	8000ac0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	e00f      	b.n	8000ae0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b03      	cmp	r3, #3
 8000ac4:	d80b      	bhi.n	8000ade <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	2301      	movs	r3, #1
 8000aca:	425b      	negs	r3, r3
 8000acc:	2200      	movs	r2, #0
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f000 f8d8 	bl	8000c84 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_InitTick+0x64>)
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
 8000adc:	e000      	b.n	8000ae0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b003      	add	sp, #12
 8000ae6:	bd90      	pop	{r4, r7, pc}
 8000ae8:	20000004 	.word	0x20000004
 8000aec:	2000000c 	.word	0x2000000c
 8000af0:	20000008 	.word	0x20000008

08000af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_IncTick+0x1c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	001a      	movs	r2, r3
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <HAL_IncTick+0x20>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	18d2      	adds	r2, r2, r3
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <HAL_IncTick+0x20>)
 8000b06:	601a      	str	r2, [r3, #0]
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	2000000c 	.word	0x2000000c
 8000b14:	2000010c 	.word	0x2000010c

08000b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b1c:	4b02      	ldr	r3, [pc, #8]	; (8000b28 <HAL_GetTick+0x10>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
}
 8000b20:	0018      	movs	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	2000010c 	.word	0x2000010c

08000b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	0002      	movs	r2, r0
 8000b34:	1dfb      	adds	r3, r7, #7
 8000b36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b38:	1dfb      	adds	r3, r7, #7
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b3e:	d809      	bhi.n	8000b54 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	001a      	movs	r2, r3
 8000b46:	231f      	movs	r3, #31
 8000b48:	401a      	ands	r2, r3
 8000b4a:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <__NVIC_EnableIRQ+0x30>)
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	4091      	lsls	r1, r2
 8000b50:	000a      	movs	r2, r1
 8000b52:	601a      	str	r2, [r3, #0]
  }
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b002      	add	sp, #8
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	e000e100 	.word	0xe000e100

08000b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	0002      	movs	r2, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b7f      	cmp	r3, #127	; 0x7f
 8000b74:	d828      	bhi.n	8000bc8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b76:	4a2f      	ldr	r2, [pc, #188]	; (8000c34 <__NVIC_SetPriority+0xd4>)
 8000b78:	1dfb      	adds	r3, r7, #7
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	089b      	lsrs	r3, r3, #2
 8000b80:	33c0      	adds	r3, #192	; 0xc0
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	589b      	ldr	r3, [r3, r2]
 8000b86:	1dfa      	adds	r2, r7, #7
 8000b88:	7812      	ldrb	r2, [r2, #0]
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	400a      	ands	r2, r1
 8000b90:	00d2      	lsls	r2, r2, #3
 8000b92:	21ff      	movs	r1, #255	; 0xff
 8000b94:	4091      	lsls	r1, r2
 8000b96:	000a      	movs	r2, r1
 8000b98:	43d2      	mvns	r2, r2
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	019b      	lsls	r3, r3, #6
 8000ba2:	22ff      	movs	r2, #255	; 0xff
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	0018      	movs	r0, r3
 8000bac:	2303      	movs	r3, #3
 8000bae:	4003      	ands	r3, r0
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb4:	481f      	ldr	r0, [pc, #124]	; (8000c34 <__NVIC_SetPriority+0xd4>)
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	b25b      	sxtb	r3, r3
 8000bbc:	089b      	lsrs	r3, r3, #2
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	33c0      	adds	r3, #192	; 0xc0
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bc6:	e031      	b.n	8000c2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc8:	4a1b      	ldr	r2, [pc, #108]	; (8000c38 <__NVIC_SetPriority+0xd8>)
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	0019      	movs	r1, r3
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	400b      	ands	r3, r1
 8000bd4:	3b08      	subs	r3, #8
 8000bd6:	089b      	lsrs	r3, r3, #2
 8000bd8:	3306      	adds	r3, #6
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	18d3      	adds	r3, r2, r3
 8000bde:	3304      	adds	r3, #4
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	1dfa      	adds	r2, r7, #7
 8000be4:	7812      	ldrb	r2, [r2, #0]
 8000be6:	0011      	movs	r1, r2
 8000be8:	2203      	movs	r2, #3
 8000bea:	400a      	ands	r2, r1
 8000bec:	00d2      	lsls	r2, r2, #3
 8000bee:	21ff      	movs	r1, #255	; 0xff
 8000bf0:	4091      	lsls	r1, r2
 8000bf2:	000a      	movs	r2, r1
 8000bf4:	43d2      	mvns	r2, r2
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	22ff      	movs	r2, #255	; 0xff
 8000c00:	401a      	ands	r2, r3
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	0018      	movs	r0, r3
 8000c08:	2303      	movs	r3, #3
 8000c0a:	4003      	ands	r3, r0
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c10:	4809      	ldr	r0, [pc, #36]	; (8000c38 <__NVIC_SetPriority+0xd8>)
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	001c      	movs	r4, r3
 8000c18:	230f      	movs	r3, #15
 8000c1a:	4023      	ands	r3, r4
 8000c1c:	3b08      	subs	r3, #8
 8000c1e:	089b      	lsrs	r3, r3, #2
 8000c20:	430a      	orrs	r2, r1
 8000c22:	3306      	adds	r3, #6
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	18c3      	adds	r3, r0, r3
 8000c28:	3304      	adds	r3, #4
 8000c2a:	601a      	str	r2, [r3, #0]
}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b003      	add	sp, #12
 8000c32:	bd90      	pop	{r4, r7, pc}
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	1e5a      	subs	r2, r3, #1
 8000c48:	2380      	movs	r3, #128	; 0x80
 8000c4a:	045b      	lsls	r3, r3, #17
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d301      	bcc.n	8000c54 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c50:	2301      	movs	r3, #1
 8000c52:	e010      	b.n	8000c76 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <SysTick_Config+0x44>)
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	425b      	negs	r3, r3
 8000c60:	2103      	movs	r1, #3
 8000c62:	0018      	movs	r0, r3
 8000c64:	f7ff ff7c 	bl	8000b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <SysTick_Config+0x44>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <SysTick_Config+0x44>)
 8000c70:	2207      	movs	r2, #7
 8000c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	0018      	movs	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b002      	add	sp, #8
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	e000e010 	.word	0xe000e010

08000c84 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	210f      	movs	r1, #15
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	1c02      	adds	r2, r0, #0
 8000c94:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	b25b      	sxtb	r3, r3
 8000c9e:	0011      	movs	r1, r2
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f7ff ff5d 	bl	8000b60 <__NVIC_SetPriority>
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b004      	add	sp, #16
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	0002      	movs	r2, r0
 8000cb6:	1dfb      	adds	r3, r7, #7
 8000cb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f7ff ff33 	bl	8000b2c <__NVIC_EnableIRQ>
}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b002      	add	sp, #8
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f7ff ffaf 	bl	8000c3c <SysTick_Config>
 8000cde:	0003      	movs	r3, r0
}
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b002      	add	sp, #8
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2225      	movs	r2, #37	; 0x25
 8000cfc:	5c9b      	ldrb	r3, [r3, r2]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d008      	beq.n	8000d16 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2204      	movs	r2, #4
 8000d08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2224      	movs	r2, #36	; 0x24
 8000d0e:	2100      	movs	r1, #0
 8000d10:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e024      	b.n	8000d60 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	210e      	movs	r1, #14
 8000d22:	438a      	bics	r2, r1
 8000d24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2101      	movs	r1, #1
 8000d32:	438a      	bics	r2, r1
 8000d34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	221c      	movs	r2, #28
 8000d3c:	401a      	ands	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	2101      	movs	r1, #1
 8000d44:	4091      	lsls	r1, r2
 8000d46:	000a      	movs	r2, r1
 8000d48:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2225      	movs	r2, #37	; 0x25
 8000d4e:	2101      	movs	r1, #1
 8000d50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2224      	movs	r2, #36	; 0x24
 8000d56:	2100      	movs	r1, #0
 8000d58:	5499      	strb	r1, [r3, r2]

    return status;
 8000d5a:	230f      	movs	r3, #15
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000d60:	0018      	movs	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b004      	add	sp, #16
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d70:	210f      	movs	r1, #15
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2225      	movs	r2, #37	; 0x25
 8000d7c:	5c9b      	ldrb	r3, [r3, r2]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d006      	beq.n	8000d92 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2204      	movs	r2, #4
 8000d88:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
 8000d90:	e02a      	b.n	8000de8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	210e      	movs	r1, #14
 8000d9e:	438a      	bics	r2, r1
 8000da0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2101      	movs	r1, #1
 8000dae:	438a      	bics	r2, r1
 8000db0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	221c      	movs	r2, #28
 8000db8:	401a      	ands	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	000a      	movs	r2, r1
 8000dc4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2225      	movs	r2, #37	; 0x25
 8000dca:	2101      	movs	r1, #1
 8000dcc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2224      	movs	r2, #36	; 0x24
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d004      	beq.n	8000de8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	0010      	movs	r0, r2
 8000de6:	4798      	blx	r3
    }
  }
  return status;
 8000de8:	230f      	movs	r3, #15
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	781b      	ldrb	r3, [r3, #0]
}
 8000dee:	0018      	movs	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b004      	add	sp, #16
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e0e:	e14f      	b.n	80010b0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2101      	movs	r1, #1
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	4091      	lsls	r1, r2
 8000e1a:	000a      	movs	r2, r1
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d100      	bne.n	8000e28 <HAL_GPIO_Init+0x30>
 8000e26:	e140      	b.n	80010aa <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	4013      	ands	r3, r2
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d005      	beq.n	8000e40 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2203      	movs	r2, #3
 8000e3a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d130      	bne.n	8000ea2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	409a      	lsls	r2, r3
 8000e4e:	0013      	movs	r3, r2
 8000e50:	43da      	mvns	r2, r3
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	68da      	ldr	r2, [r3, #12]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	409a      	lsls	r2, r3
 8000e62:	0013      	movs	r3, r2
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e76:	2201      	movs	r2, #1
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	0013      	movs	r3, r2
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	091b      	lsrs	r3, r3, #4
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
 8000e94:	0013      	movs	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	2b03      	cmp	r3, #3
 8000eac:	d017      	beq.n	8000ede <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	2203      	movs	r2, #3
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	0013      	movs	r3, r2
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	689a      	ldr	r2, [r3, #8]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	0013      	movs	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d123      	bne.n	8000f32 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	08da      	lsrs	r2, r3, #3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3208      	adds	r2, #8
 8000ef2:	0092      	lsls	r2, r2, #2
 8000ef4:	58d3      	ldr	r3, [r2, r3]
 8000ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	2207      	movs	r2, #7
 8000efc:	4013      	ands	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	220f      	movs	r2, #15
 8000f02:	409a      	lsls	r2, r3
 8000f04:	0013      	movs	r3, r2
 8000f06:	43da      	mvns	r2, r3
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	691a      	ldr	r2, [r3, #16]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	2107      	movs	r1, #7
 8000f16:	400b      	ands	r3, r1
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	0013      	movs	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	08da      	lsrs	r2, r3, #3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3208      	adds	r2, #8
 8000f2c:	0092      	lsls	r2, r2, #2
 8000f2e:	6939      	ldr	r1, [r7, #16]
 8000f30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	0013      	movs	r3, r2
 8000f42:	43da      	mvns	r2, r3
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2203      	movs	r2, #3
 8000f50:	401a      	ands	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	23c0      	movs	r3, #192	; 0xc0
 8000f6c:	029b      	lsls	r3, r3, #10
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d100      	bne.n	8000f74 <HAL_GPIO_Init+0x17c>
 8000f72:	e09a      	b.n	80010aa <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f74:	4b54      	ldr	r3, [pc, #336]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8000f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f78:	4b53      	ldr	r3, [pc, #332]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f80:	4a52      	ldr	r2, [pc, #328]	; (80010cc <HAL_GPIO_Init+0x2d4>)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	3302      	adds	r3, #2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	589b      	ldr	r3, [r3, r2]
 8000f8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	2203      	movs	r2, #3
 8000f92:	4013      	ands	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	220f      	movs	r2, #15
 8000f98:	409a      	lsls	r2, r3
 8000f9a:	0013      	movs	r3, r2
 8000f9c:	43da      	mvns	r2, r3
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	23a0      	movs	r3, #160	; 0xa0
 8000fa8:	05db      	lsls	r3, r3, #23
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d019      	beq.n	8000fe2 <HAL_GPIO_Init+0x1ea>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a47      	ldr	r2, [pc, #284]	; (80010d0 <HAL_GPIO_Init+0x2d8>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d013      	beq.n	8000fde <HAL_GPIO_Init+0x1e6>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a46      	ldr	r2, [pc, #280]	; (80010d4 <HAL_GPIO_Init+0x2dc>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d00d      	beq.n	8000fda <HAL_GPIO_Init+0x1e2>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a45      	ldr	r2, [pc, #276]	; (80010d8 <HAL_GPIO_Init+0x2e0>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d007      	beq.n	8000fd6 <HAL_GPIO_Init+0x1de>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a44      	ldr	r2, [pc, #272]	; (80010dc <HAL_GPIO_Init+0x2e4>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d101      	bne.n	8000fd2 <HAL_GPIO_Init+0x1da>
 8000fce:	2305      	movs	r3, #5
 8000fd0:	e008      	b.n	8000fe4 <HAL_GPIO_Init+0x1ec>
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	e006      	b.n	8000fe4 <HAL_GPIO_Init+0x1ec>
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e004      	b.n	8000fe4 <HAL_GPIO_Init+0x1ec>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	e002      	b.n	8000fe4 <HAL_GPIO_Init+0x1ec>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <HAL_GPIO_Init+0x1ec>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	2103      	movs	r1, #3
 8000fe8:	400a      	ands	r2, r1
 8000fea:	0092      	lsls	r2, r2, #2
 8000fec:	4093      	lsls	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ff4:	4935      	ldr	r1, [pc, #212]	; (80010cc <HAL_GPIO_Init+0x2d4>)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001002:	4b37      	ldr	r3, [pc, #220]	; (80010e0 <HAL_GPIO_Init+0x2e8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	43da      	mvns	r2, r3
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	025b      	lsls	r3, r3, #9
 800101a:	4013      	ands	r3, r2
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001026:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <HAL_GPIO_Init+0x2e8>)
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800102c:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <HAL_GPIO_Init+0x2e8>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43da      	mvns	r2, r3
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	029b      	lsls	r3, r3, #10
 8001044:	4013      	ands	r3, r2
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001050:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <HAL_GPIO_Init+0x2e8>)
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <HAL_GPIO_Init+0x2e8>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43da      	mvns	r2, r3
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	035b      	lsls	r3, r3, #13
 800106e:	4013      	ands	r3, r2
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <HAL_GPIO_Init+0x2e8>)
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <HAL_GPIO_Init+0x2e8>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	43da      	mvns	r2, r3
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	039b      	lsls	r3, r3, #14
 8001098:	4013      	ands	r3, r2
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_GPIO_Init+0x2e8>)
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	3301      	adds	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	40da      	lsrs	r2, r3
 80010b8:	1e13      	subs	r3, r2, #0
 80010ba:	d000      	beq.n	80010be <HAL_GPIO_Init+0x2c6>
 80010bc:	e6a8      	b.n	8000e10 <HAL_GPIO_Init+0x18>
  }
}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b006      	add	sp, #24
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40010000 	.word	0x40010000
 80010d0:	50000400 	.word	0x50000400
 80010d4:	50000800 	.word	0x50000800
 80010d8:	50000c00 	.word	0x50000c00
 80010dc:	50001c00 	.word	0x50001c00
 80010e0:	40010400 	.word	0x40010400

080010e4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	0008      	movs	r0, r1
 80010ee:	0011      	movs	r1, r2
 80010f0:	1cbb      	adds	r3, r7, #2
 80010f2:	1c02      	adds	r2, r0, #0
 80010f4:	801a      	strh	r2, [r3, #0]
 80010f6:	1c7b      	adds	r3, r7, #1
 80010f8:	1c0a      	adds	r2, r1, #0
 80010fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010fc:	1c7b      	adds	r3, r7, #1
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001104:	1cbb      	adds	r3, r7, #2
 8001106:	881a      	ldrh	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800110c:	e003      	b.n	8001116 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800110e:	1cbb      	adds	r3, r7, #2
 8001110:	881a      	ldrh	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	b002      	add	sp, #8
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001120:	b5b0      	push	{r4, r5, r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d102      	bne.n	8001134 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	f000 fbaf 	bl	8001892 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001134:	4bcf      	ldr	r3, [pc, #828]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	220c      	movs	r2, #12
 800113a:	4013      	ands	r3, r2
 800113c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800113e:	4bcd      	ldr	r3, [pc, #820]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	025b      	lsls	r3, r3, #9
 8001146:	4013      	ands	r3, r2
 8001148:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2201      	movs	r2, #1
 8001150:	4013      	ands	r3, r2
 8001152:	d100      	bne.n	8001156 <HAL_RCC_OscConfig+0x36>
 8001154:	e07e      	b.n	8001254 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001156:	6a3b      	ldr	r3, [r7, #32]
 8001158:	2b08      	cmp	r3, #8
 800115a:	d007      	beq.n	800116c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	2b0c      	cmp	r3, #12
 8001160:	d112      	bne.n	8001188 <HAL_RCC_OscConfig+0x68>
 8001162:	69fa      	ldr	r2, [r7, #28]
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	025b      	lsls	r3, r3, #9
 8001168:	429a      	cmp	r2, r3
 800116a:	d10d      	bne.n	8001188 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116c:	4bc1      	ldr	r3, [pc, #772]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	029b      	lsls	r3, r3, #10
 8001174:	4013      	ands	r3, r2
 8001176:	d100      	bne.n	800117a <HAL_RCC_OscConfig+0x5a>
 8001178:	e06b      	b.n	8001252 <HAL_RCC_OscConfig+0x132>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d167      	bne.n	8001252 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	f000 fb85 	bl	8001892 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	025b      	lsls	r3, r3, #9
 8001190:	429a      	cmp	r2, r3
 8001192:	d107      	bne.n	80011a4 <HAL_RCC_OscConfig+0x84>
 8001194:	4bb7      	ldr	r3, [pc, #732]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4bb6      	ldr	r3, [pc, #728]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800119a:	2180      	movs	r1, #128	; 0x80
 800119c:	0249      	lsls	r1, r1, #9
 800119e:	430a      	orrs	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e027      	b.n	80011f4 <HAL_RCC_OscConfig+0xd4>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	23a0      	movs	r3, #160	; 0xa0
 80011aa:	02db      	lsls	r3, r3, #11
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d10e      	bne.n	80011ce <HAL_RCC_OscConfig+0xae>
 80011b0:	4bb0      	ldr	r3, [pc, #704]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4baf      	ldr	r3, [pc, #700]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	02c9      	lsls	r1, r1, #11
 80011ba:	430a      	orrs	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	4bad      	ldr	r3, [pc, #692]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4bac      	ldr	r3, [pc, #688]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	0249      	lsls	r1, r1, #9
 80011c8:	430a      	orrs	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	e012      	b.n	80011f4 <HAL_RCC_OscConfig+0xd4>
 80011ce:	4ba9      	ldr	r3, [pc, #676]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4ba8      	ldr	r3, [pc, #672]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80011d4:	49a8      	ldr	r1, [pc, #672]	; (8001478 <HAL_RCC_OscConfig+0x358>)
 80011d6:	400a      	ands	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	4ba6      	ldr	r3, [pc, #664]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	025b      	lsls	r3, r3, #9
 80011e2:	4013      	ands	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4ba2      	ldr	r3, [pc, #648]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4ba1      	ldr	r3, [pc, #644]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80011ee:	49a3      	ldr	r1, [pc, #652]	; (800147c <HAL_RCC_OscConfig+0x35c>)
 80011f0:	400a      	ands	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d015      	beq.n	8001228 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fc8c 	bl	8000b18 <HAL_GetTick>
 8001200:	0003      	movs	r3, r0
 8001202:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001204:	e009      	b.n	800121a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001206:	f7ff fc87 	bl	8000b18 <HAL_GetTick>
 800120a:	0002      	movs	r2, r0
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b64      	cmp	r3, #100	; 0x64
 8001212:	d902      	bls.n	800121a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	f000 fb3c 	bl	8001892 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800121a:	4b96      	ldr	r3, [pc, #600]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	029b      	lsls	r3, r3, #10
 8001222:	4013      	ands	r3, r2
 8001224:	d0ef      	beq.n	8001206 <HAL_RCC_OscConfig+0xe6>
 8001226:	e015      	b.n	8001254 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fc76 	bl	8000b18 <HAL_GetTick>
 800122c:	0003      	movs	r3, r0
 800122e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001232:	f7ff fc71 	bl	8000b18 <HAL_GetTick>
 8001236:	0002      	movs	r2, r0
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b64      	cmp	r3, #100	; 0x64
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e326      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001244:	4b8b      	ldr	r3, [pc, #556]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	029b      	lsls	r3, r3, #10
 800124c:	4013      	ands	r3, r2
 800124e:	d1f0      	bne.n	8001232 <HAL_RCC_OscConfig+0x112>
 8001250:	e000      	b.n	8001254 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001252:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2202      	movs	r2, #2
 800125a:	4013      	ands	r3, r2
 800125c:	d100      	bne.n	8001260 <HAL_RCC_OscConfig+0x140>
 800125e:	e08b      	b.n	8001378 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	2b04      	cmp	r3, #4
 800126a:	d005      	beq.n	8001278 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800126c:	6a3b      	ldr	r3, [r7, #32]
 800126e:	2b0c      	cmp	r3, #12
 8001270:	d13e      	bne.n	80012f0 <HAL_RCC_OscConfig+0x1d0>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d13b      	bne.n	80012f0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001278:	4b7e      	ldr	r3, [pc, #504]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2204      	movs	r2, #4
 800127e:	4013      	ands	r3, r2
 8001280:	d004      	beq.n	800128c <HAL_RCC_OscConfig+0x16c>
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d101      	bne.n	800128c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e302      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128c:	4b79      	ldr	r3, [pc, #484]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	4a7b      	ldr	r2, [pc, #492]	; (8001480 <HAL_RCC_OscConfig+0x360>)
 8001292:	4013      	ands	r3, r2
 8001294:	0019      	movs	r1, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	021a      	lsls	r2, r3, #8
 800129c:	4b75      	ldr	r3, [pc, #468]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800129e:	430a      	orrs	r2, r1
 80012a0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012a2:	4b74      	ldr	r3, [pc, #464]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2209      	movs	r2, #9
 80012a8:	4393      	bics	r3, r2
 80012aa:	0019      	movs	r1, r3
 80012ac:	4b71      	ldr	r3, [pc, #452]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012b4:	f000 fc40 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 80012b8:	0001      	movs	r1, r0
 80012ba:	4b6e      	ldr	r3, [pc, #440]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	091b      	lsrs	r3, r3, #4
 80012c0:	220f      	movs	r2, #15
 80012c2:	4013      	ands	r3, r2
 80012c4:	4a6f      	ldr	r2, [pc, #444]	; (8001484 <HAL_RCC_OscConfig+0x364>)
 80012c6:	5cd3      	ldrb	r3, [r2, r3]
 80012c8:	000a      	movs	r2, r1
 80012ca:	40da      	lsrs	r2, r3
 80012cc:	4b6e      	ldr	r3, [pc, #440]	; (8001488 <HAL_RCC_OscConfig+0x368>)
 80012ce:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80012d0:	4b6e      	ldr	r3, [pc, #440]	; (800148c <HAL_RCC_OscConfig+0x36c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2513      	movs	r5, #19
 80012d6:	197c      	adds	r4, r7, r5
 80012d8:	0018      	movs	r0, r3
 80012da:	f7ff fbd7 	bl	8000a8c <HAL_InitTick>
 80012de:	0003      	movs	r3, r0
 80012e0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80012e2:	197b      	adds	r3, r7, r5
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d046      	beq.n	8001378 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80012ea:	197b      	adds	r3, r7, r5
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	e2d0      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d027      	beq.n	8001346 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012f6:	4b5f      	ldr	r3, [pc, #380]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2209      	movs	r2, #9
 80012fc:	4393      	bics	r3, r2
 80012fe:	0019      	movs	r1, r3
 8001300:	4b5c      	ldr	r3, [pc, #368]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	430a      	orrs	r2, r1
 8001306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fc06 	bl	8000b18 <HAL_GetTick>
 800130c:	0003      	movs	r3, r0
 800130e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001312:	f7ff fc01 	bl	8000b18 <HAL_GetTick>
 8001316:	0002      	movs	r2, r0
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e2b6      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001324:	4b53      	ldr	r3, [pc, #332]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2204      	movs	r2, #4
 800132a:	4013      	ands	r3, r2
 800132c:	d0f1      	beq.n	8001312 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132e:	4b51      	ldr	r3, [pc, #324]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	4a53      	ldr	r2, [pc, #332]	; (8001480 <HAL_RCC_OscConfig+0x360>)
 8001334:	4013      	ands	r3, r2
 8001336:	0019      	movs	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	021a      	lsls	r2, r3, #8
 800133e:	4b4d      	ldr	r3, [pc, #308]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001340:	430a      	orrs	r2, r1
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	e018      	b.n	8001378 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001346:	4b4b      	ldr	r3, [pc, #300]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	4b4a      	ldr	r3, [pc, #296]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800134c:	2101      	movs	r1, #1
 800134e:	438a      	bics	r2, r1
 8001350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001352:	f7ff fbe1 	bl	8000b18 <HAL_GetTick>
 8001356:	0003      	movs	r3, r0
 8001358:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800135c:	f7ff fbdc 	bl	8000b18 <HAL_GetTick>
 8001360:	0002      	movs	r2, r0
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e291      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800136e:	4b41      	ldr	r3, [pc, #260]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2204      	movs	r2, #4
 8001374:	4013      	ands	r3, r2
 8001376:	d1f1      	bne.n	800135c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2210      	movs	r2, #16
 800137e:	4013      	ands	r3, r2
 8001380:	d100      	bne.n	8001384 <HAL_RCC_OscConfig+0x264>
 8001382:	e0a1      	b.n	80014c8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001384:	6a3b      	ldr	r3, [r7, #32]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d140      	bne.n	800140c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800138a:	4b3a      	ldr	r3, [pc, #232]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4013      	ands	r3, r2
 8001394:	d005      	beq.n	80013a2 <HAL_RCC_OscConfig+0x282>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e277      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013a2:	4b34      	ldr	r3, [pc, #208]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	4a3a      	ldr	r2, [pc, #232]	; (8001490 <HAL_RCC_OscConfig+0x370>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	0019      	movs	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013b0:	4b30      	ldr	r3, [pc, #192]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80013b2:	430a      	orrs	r2, r1
 80013b4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013b6:	4b2f      	ldr	r3, [pc, #188]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	0a19      	lsrs	r1, r3, #8
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	061a      	lsls	r2, r3, #24
 80013c4:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80013c6:	430a      	orrs	r2, r1
 80013c8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	0b5b      	lsrs	r3, r3, #13
 80013d0:	3301      	adds	r3, #1
 80013d2:	2280      	movs	r2, #128	; 0x80
 80013d4:	0212      	lsls	r2, r2, #8
 80013d6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80013d8:	4b26      	ldr	r3, [pc, #152]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	091b      	lsrs	r3, r3, #4
 80013de:	210f      	movs	r1, #15
 80013e0:	400b      	ands	r3, r1
 80013e2:	4928      	ldr	r1, [pc, #160]	; (8001484 <HAL_RCC_OscConfig+0x364>)
 80013e4:	5ccb      	ldrb	r3, [r1, r3]
 80013e6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013e8:	4b27      	ldr	r3, [pc, #156]	; (8001488 <HAL_RCC_OscConfig+0x368>)
 80013ea:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80013ec:	4b27      	ldr	r3, [pc, #156]	; (800148c <HAL_RCC_OscConfig+0x36c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2513      	movs	r5, #19
 80013f2:	197c      	adds	r4, r7, r5
 80013f4:	0018      	movs	r0, r3
 80013f6:	f7ff fb49 	bl	8000a8c <HAL_InitTick>
 80013fa:	0003      	movs	r3, r0
 80013fc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80013fe:	197b      	adds	r3, r7, r5
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d060      	beq.n	80014c8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001406:	197b      	adds	r3, r7, r5
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	e242      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d03f      	beq.n	8001494 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800141a:	2180      	movs	r1, #128	; 0x80
 800141c:	0049      	lsls	r1, r1, #1
 800141e:	430a      	orrs	r2, r1
 8001420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001422:	f7ff fb79 	bl	8000b18 <HAL_GetTick>
 8001426:	0003      	movs	r3, r0
 8001428:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800142c:	f7ff fb74 	bl	8000b18 <HAL_GetTick>
 8001430:	0002      	movs	r2, r0
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e229      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800143e:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4013      	ands	r3, r2
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4a10      	ldr	r2, [pc, #64]	; (8001490 <HAL_RCC_OscConfig+0x370>)
 8001450:	4013      	ands	r3, r2
 8001452:	0019      	movs	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800145a:	430a      	orrs	r2, r1
 800145c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	0a19      	lsrs	r1, r3, #8
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	061a      	lsls	r2, r3, #24
 800146c:	4b01      	ldr	r3, [pc, #4]	; (8001474 <HAL_RCC_OscConfig+0x354>)
 800146e:	430a      	orrs	r2, r1
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	e029      	b.n	80014c8 <HAL_RCC_OscConfig+0x3a8>
 8001474:	40021000 	.word	0x40021000
 8001478:	fffeffff 	.word	0xfffeffff
 800147c:	fffbffff 	.word	0xfffbffff
 8001480:	ffffe0ff 	.word	0xffffe0ff
 8001484:	080040d8 	.word	0x080040d8
 8001488:	20000004 	.word	0x20000004
 800148c:	20000008 	.word	0x20000008
 8001490:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001494:	4bbd      	ldr	r3, [pc, #756]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4bbc      	ldr	r3, [pc, #752]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 800149a:	49bd      	ldr	r1, [pc, #756]	; (8001790 <HAL_RCC_OscConfig+0x670>)
 800149c:	400a      	ands	r2, r1
 800149e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff fb3a 	bl	8000b18 <HAL_GetTick>
 80014a4:	0003      	movs	r3, r0
 80014a6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014aa:	f7ff fb35 	bl	8000b18 <HAL_GetTick>
 80014ae:	0002      	movs	r2, r0
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e1ea      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014bc:	4bb3      	ldr	r3, [pc, #716]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4013      	ands	r3, r2
 80014c6:	d1f0      	bne.n	80014aa <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2208      	movs	r2, #8
 80014ce:	4013      	ands	r3, r2
 80014d0:	d036      	beq.n	8001540 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d019      	beq.n	800150e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014da:	4bac      	ldr	r3, [pc, #688]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80014dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014de:	4bab      	ldr	r3, [pc, #684]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80014e0:	2101      	movs	r1, #1
 80014e2:	430a      	orrs	r2, r1
 80014e4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fb17 	bl	8000b18 <HAL_GetTick>
 80014ea:	0003      	movs	r3, r0
 80014ec:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f0:	f7ff fb12 	bl	8000b18 <HAL_GetTick>
 80014f4:	0002      	movs	r2, r0
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e1c7      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001502:	4ba2      	ldr	r3, [pc, #648]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001506:	2202      	movs	r2, #2
 8001508:	4013      	ands	r3, r2
 800150a:	d0f1      	beq.n	80014f0 <HAL_RCC_OscConfig+0x3d0>
 800150c:	e018      	b.n	8001540 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800150e:	4b9f      	ldr	r3, [pc, #636]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001510:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001512:	4b9e      	ldr	r3, [pc, #632]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001514:	2101      	movs	r1, #1
 8001516:	438a      	bics	r2, r1
 8001518:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151a:	f7ff fafd 	bl	8000b18 <HAL_GetTick>
 800151e:	0003      	movs	r3, r0
 8001520:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001524:	f7ff faf8 	bl	8000b18 <HAL_GetTick>
 8001528:	0002      	movs	r2, r0
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e1ad      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001536:	4b95      	ldr	r3, [pc, #596]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800153a:	2202      	movs	r2, #2
 800153c:	4013      	ands	r3, r2
 800153e:	d1f1      	bne.n	8001524 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2204      	movs	r2, #4
 8001546:	4013      	ands	r3, r2
 8001548:	d100      	bne.n	800154c <HAL_RCC_OscConfig+0x42c>
 800154a:	e0ae      	b.n	80016aa <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800154c:	2027      	movs	r0, #39	; 0x27
 800154e:	183b      	adds	r3, r7, r0
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001554:	4b8d      	ldr	r3, [pc, #564]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	055b      	lsls	r3, r3, #21
 800155c:	4013      	ands	r3, r2
 800155e:	d109      	bne.n	8001574 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001560:	4b8a      	ldr	r3, [pc, #552]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001564:	4b89      	ldr	r3, [pc, #548]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001566:	2180      	movs	r1, #128	; 0x80
 8001568:	0549      	lsls	r1, r1, #21
 800156a:	430a      	orrs	r2, r1
 800156c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800156e:	183b      	adds	r3, r7, r0
 8001570:	2201      	movs	r2, #1
 8001572:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	4b87      	ldr	r3, [pc, #540]	; (8001794 <HAL_RCC_OscConfig+0x674>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4013      	ands	r3, r2
 800157e:	d11a      	bne.n	80015b6 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001580:	4b84      	ldr	r3, [pc, #528]	; (8001794 <HAL_RCC_OscConfig+0x674>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b83      	ldr	r3, [pc, #524]	; (8001794 <HAL_RCC_OscConfig+0x674>)
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	0049      	lsls	r1, r1, #1
 800158a:	430a      	orrs	r2, r1
 800158c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800158e:	f7ff fac3 	bl	8000b18 <HAL_GetTick>
 8001592:	0003      	movs	r3, r0
 8001594:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001598:	f7ff fabe 	bl	8000b18 <HAL_GetTick>
 800159c:	0002      	movs	r2, r0
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	; 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e173      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015aa:	4b7a      	ldr	r3, [pc, #488]	; (8001794 <HAL_RCC_OscConfig+0x674>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4013      	ands	r3, r2
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	429a      	cmp	r2, r3
 80015c0:	d107      	bne.n	80015d2 <HAL_RCC_OscConfig+0x4b2>
 80015c2:	4b72      	ldr	r3, [pc, #456]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80015c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015c6:	4b71      	ldr	r3, [pc, #452]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	0049      	lsls	r1, r1, #1
 80015cc:	430a      	orrs	r2, r1
 80015ce:	651a      	str	r2, [r3, #80]	; 0x50
 80015d0:	e031      	b.n	8001636 <HAL_RCC_OscConfig+0x516>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10c      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4d4>
 80015da:	4b6c      	ldr	r3, [pc, #432]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80015dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015de:	4b6b      	ldr	r3, [pc, #428]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80015e0:	496b      	ldr	r1, [pc, #428]	; (8001790 <HAL_RCC_OscConfig+0x670>)
 80015e2:	400a      	ands	r2, r1
 80015e4:	651a      	str	r2, [r3, #80]	; 0x50
 80015e6:	4b69      	ldr	r3, [pc, #420]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80015e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015ea:	4b68      	ldr	r3, [pc, #416]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80015ec:	496a      	ldr	r1, [pc, #424]	; (8001798 <HAL_RCC_OscConfig+0x678>)
 80015ee:	400a      	ands	r2, r1
 80015f0:	651a      	str	r2, [r3, #80]	; 0x50
 80015f2:	e020      	b.n	8001636 <HAL_RCC_OscConfig+0x516>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	23a0      	movs	r3, #160	; 0xa0
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d10e      	bne.n	800161e <HAL_RCC_OscConfig+0x4fe>
 8001600:	4b62      	ldr	r3, [pc, #392]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001602:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001604:	4b61      	ldr	r3, [pc, #388]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001606:	2180      	movs	r1, #128	; 0x80
 8001608:	00c9      	lsls	r1, r1, #3
 800160a:	430a      	orrs	r2, r1
 800160c:	651a      	str	r2, [r3, #80]	; 0x50
 800160e:	4b5f      	ldr	r3, [pc, #380]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001610:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001612:	4b5e      	ldr	r3, [pc, #376]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001614:	2180      	movs	r1, #128	; 0x80
 8001616:	0049      	lsls	r1, r1, #1
 8001618:	430a      	orrs	r2, r1
 800161a:	651a      	str	r2, [r3, #80]	; 0x50
 800161c:	e00b      	b.n	8001636 <HAL_RCC_OscConfig+0x516>
 800161e:	4b5b      	ldr	r3, [pc, #364]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001620:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001622:	4b5a      	ldr	r3, [pc, #360]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001624:	495a      	ldr	r1, [pc, #360]	; (8001790 <HAL_RCC_OscConfig+0x670>)
 8001626:	400a      	ands	r2, r1
 8001628:	651a      	str	r2, [r3, #80]	; 0x50
 800162a:	4b58      	ldr	r3, [pc, #352]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 800162c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800162e:	4b57      	ldr	r3, [pc, #348]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001630:	4959      	ldr	r1, [pc, #356]	; (8001798 <HAL_RCC_OscConfig+0x678>)
 8001632:	400a      	ands	r2, r1
 8001634:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d015      	beq.n	800166a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163e:	f7ff fa6b 	bl	8000b18 <HAL_GetTick>
 8001642:	0003      	movs	r3, r0
 8001644:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001646:	e009      	b.n	800165c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001648:	f7ff fa66 	bl	8000b18 <HAL_GetTick>
 800164c:	0002      	movs	r2, r0
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	4a52      	ldr	r2, [pc, #328]	; (800179c <HAL_RCC_OscConfig+0x67c>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e11a      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800165c:	4b4b      	ldr	r3, [pc, #300]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 800165e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4013      	ands	r3, r2
 8001666:	d0ef      	beq.n	8001648 <HAL_RCC_OscConfig+0x528>
 8001668:	e014      	b.n	8001694 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166a:	f7ff fa55 	bl	8000b18 <HAL_GetTick>
 800166e:	0003      	movs	r3, r0
 8001670:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001672:	e009      	b.n	8001688 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001674:	f7ff fa50 	bl	8000b18 <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	4a47      	ldr	r2, [pc, #284]	; (800179c <HAL_RCC_OscConfig+0x67c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e104      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001688:	4b40      	ldr	r3, [pc, #256]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 800168a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4013      	ands	r3, r2
 8001692:	d1ef      	bne.n	8001674 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001694:	2327      	movs	r3, #39	; 0x27
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d105      	bne.n	80016aa <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800169e:	4b3b      	ldr	r3, [pc, #236]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80016a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016a2:	4b3a      	ldr	r3, [pc, #232]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80016a4:	493e      	ldr	r1, [pc, #248]	; (80017a0 <HAL_RCC_OscConfig+0x680>)
 80016a6:	400a      	ands	r2, r1
 80016a8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2220      	movs	r2, #32
 80016b0:	4013      	ands	r3, r2
 80016b2:	d049      	beq.n	8001748 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d026      	beq.n	800170a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80016bc:	4b33      	ldr	r3, [pc, #204]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	4b32      	ldr	r3, [pc, #200]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80016c2:	2101      	movs	r1, #1
 80016c4:	430a      	orrs	r2, r1
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	4b30      	ldr	r3, [pc, #192]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80016ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016cc:	4b2f      	ldr	r3, [pc, #188]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 80016ce:	2101      	movs	r1, #1
 80016d0:	430a      	orrs	r2, r1
 80016d2:	635a      	str	r2, [r3, #52]	; 0x34
 80016d4:	4b33      	ldr	r3, [pc, #204]	; (80017a4 <HAL_RCC_OscConfig+0x684>)
 80016d6:	6a1a      	ldr	r2, [r3, #32]
 80016d8:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <HAL_RCC_OscConfig+0x684>)
 80016da:	2180      	movs	r1, #128	; 0x80
 80016dc:	0189      	lsls	r1, r1, #6
 80016de:	430a      	orrs	r2, r1
 80016e0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff fa19 	bl	8000b18 <HAL_GetTick>
 80016e6:	0003      	movs	r3, r0
 80016e8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016ec:	f7ff fa14 	bl	8000b18 <HAL_GetTick>
 80016f0:	0002      	movs	r2, r0
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e0c9      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016fe:	4b23      	ldr	r3, [pc, #140]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2202      	movs	r2, #2
 8001704:	4013      	ands	r3, r2
 8001706:	d0f1      	beq.n	80016ec <HAL_RCC_OscConfig+0x5cc>
 8001708:	e01e      	b.n	8001748 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	4b1f      	ldr	r3, [pc, #124]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001710:	2101      	movs	r1, #1
 8001712:	438a      	bics	r2, r1
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <HAL_RCC_OscConfig+0x684>)
 8001718:	6a1a      	ldr	r2, [r3, #32]
 800171a:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <HAL_RCC_OscConfig+0x684>)
 800171c:	4922      	ldr	r1, [pc, #136]	; (80017a8 <HAL_RCC_OscConfig+0x688>)
 800171e:	400a      	ands	r2, r1
 8001720:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001722:	f7ff f9f9 	bl	8000b18 <HAL_GetTick>
 8001726:	0003      	movs	r3, r0
 8001728:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800172c:	f7ff f9f4 	bl	8000b18 <HAL_GetTick>
 8001730:	0002      	movs	r2, r0
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e0a9      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2202      	movs	r2, #2
 8001744:	4013      	ands	r3, r2
 8001746:	d1f1      	bne.n	800172c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	2b00      	cmp	r3, #0
 800174e:	d100      	bne.n	8001752 <HAL_RCC_OscConfig+0x632>
 8001750:	e09e      	b.n	8001890 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	2b0c      	cmp	r3, #12
 8001756:	d100      	bne.n	800175a <HAL_RCC_OscConfig+0x63a>
 8001758:	e077      	b.n	800184a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175e:	2b02      	cmp	r3, #2
 8001760:	d158      	bne.n	8001814 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_RCC_OscConfig+0x66c>)
 8001768:	4910      	ldr	r1, [pc, #64]	; (80017ac <HAL_RCC_OscConfig+0x68c>)
 800176a:	400a      	ands	r2, r1
 800176c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176e:	f7ff f9d3 	bl	8000b18 <HAL_GetTick>
 8001772:	0003      	movs	r3, r0
 8001774:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001776:	e01b      	b.n	80017b0 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff f9ce 	bl	8000b18 <HAL_GetTick>
 800177c:	0002      	movs	r2, r0
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d914      	bls.n	80017b0 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e083      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	40021000 	.word	0x40021000
 8001790:	fffffeff 	.word	0xfffffeff
 8001794:	40007000 	.word	0x40007000
 8001798:	fffffbff 	.word	0xfffffbff
 800179c:	00001388 	.word	0x00001388
 80017a0:	efffffff 	.word	0xefffffff
 80017a4:	40010000 	.word	0x40010000
 80017a8:	ffffdfff 	.word	0xffffdfff
 80017ac:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017b0:	4b3a      	ldr	r3, [pc, #232]	; (800189c <HAL_RCC_OscConfig+0x77c>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	049b      	lsls	r3, r3, #18
 80017b8:	4013      	ands	r3, r2
 80017ba:	d1dd      	bne.n	8001778 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017bc:	4b37      	ldr	r3, [pc, #220]	; (800189c <HAL_RCC_OscConfig+0x77c>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4a37      	ldr	r2, [pc, #220]	; (80018a0 <HAL_RCC_OscConfig+0x780>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	0019      	movs	r1, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d4:	431a      	orrs	r2, r3
 80017d6:	4b31      	ldr	r3, [pc, #196]	; (800189c <HAL_RCC_OscConfig+0x77c>)
 80017d8:	430a      	orrs	r2, r1
 80017da:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017dc:	4b2f      	ldr	r3, [pc, #188]	; (800189c <HAL_RCC_OscConfig+0x77c>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b2e      	ldr	r3, [pc, #184]	; (800189c <HAL_RCC_OscConfig+0x77c>)
 80017e2:	2180      	movs	r1, #128	; 0x80
 80017e4:	0449      	lsls	r1, r1, #17
 80017e6:	430a      	orrs	r2, r1
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff f995 	bl	8000b18 <HAL_GetTick>
 80017ee:	0003      	movs	r3, r0
 80017f0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff f990 	bl	8000b18 <HAL_GetTick>
 80017f8:	0002      	movs	r2, r0
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e045      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001806:	4b25      	ldr	r3, [pc, #148]	; (800189c <HAL_RCC_OscConfig+0x77c>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	049b      	lsls	r3, r3, #18
 800180e:	4013      	ands	r3, r2
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0x6d4>
 8001812:	e03d      	b.n	8001890 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001814:	4b21      	ldr	r3, [pc, #132]	; (800189c <HAL_RCC_OscConfig+0x77c>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b20      	ldr	r3, [pc, #128]	; (800189c <HAL_RCC_OscConfig+0x77c>)
 800181a:	4922      	ldr	r1, [pc, #136]	; (80018a4 <HAL_RCC_OscConfig+0x784>)
 800181c:	400a      	ands	r2, r1
 800181e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff f97a 	bl	8000b18 <HAL_GetTick>
 8001824:	0003      	movs	r3, r0
 8001826:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800182a:	f7ff f975 	bl	8000b18 <HAL_GetTick>
 800182e:	0002      	movs	r2, r0
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e02a      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800183c:	4b17      	ldr	r3, [pc, #92]	; (800189c <HAL_RCC_OscConfig+0x77c>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	049b      	lsls	r3, r3, #18
 8001844:	4013      	ands	r3, r2
 8001846:	d1f0      	bne.n	800182a <HAL_RCC_OscConfig+0x70a>
 8001848:	e022      	b.n	8001890 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	2b01      	cmp	r3, #1
 8001850:	d101      	bne.n	8001856 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e01d      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_RCC_OscConfig+0x77c>)
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	025b      	lsls	r3, r3, #9
 8001862:	401a      	ands	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	429a      	cmp	r2, r3
 800186a:	d10f      	bne.n	800188c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800186c:	69fa      	ldr	r2, [r7, #28]
 800186e:	23f0      	movs	r3, #240	; 0xf0
 8001870:	039b      	lsls	r3, r3, #14
 8001872:	401a      	ands	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001878:	429a      	cmp	r2, r3
 800187a:	d107      	bne.n	800188c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	23c0      	movs	r3, #192	; 0xc0
 8001880:	041b      	lsls	r3, r3, #16
 8001882:	401a      	ands	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d001      	beq.n	8001890 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	0018      	movs	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	b00a      	add	sp, #40	; 0x28
 8001898:	bdb0      	pop	{r4, r5, r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	40021000 	.word	0x40021000
 80018a0:	ff02ffff 	.word	0xff02ffff
 80018a4:	feffffff 	.word	0xfeffffff

080018a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e128      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018bc:	4b96      	ldr	r3, [pc, #600]	; (8001b18 <HAL_RCC_ClockConfig+0x270>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2201      	movs	r2, #1
 80018c2:	4013      	ands	r3, r2
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d91e      	bls.n	8001908 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ca:	4b93      	ldr	r3, [pc, #588]	; (8001b18 <HAL_RCC_ClockConfig+0x270>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2201      	movs	r2, #1
 80018d0:	4393      	bics	r3, r2
 80018d2:	0019      	movs	r1, r3
 80018d4:	4b90      	ldr	r3, [pc, #576]	; (8001b18 <HAL_RCC_ClockConfig+0x270>)
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018dc:	f7ff f91c 	bl	8000b18 <HAL_GetTick>
 80018e0:	0003      	movs	r3, r0
 80018e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e4:	e009      	b.n	80018fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e6:	f7ff f917 	bl	8000b18 <HAL_GetTick>
 80018ea:	0002      	movs	r2, r0
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	4a8a      	ldr	r2, [pc, #552]	; (8001b1c <HAL_RCC_ClockConfig+0x274>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e109      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fa:	4b87      	ldr	r3, [pc, #540]	; (8001b18 <HAL_RCC_ClockConfig+0x270>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2201      	movs	r2, #1
 8001900:	4013      	ands	r3, r2
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d1ee      	bne.n	80018e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2202      	movs	r2, #2
 800190e:	4013      	ands	r3, r2
 8001910:	d009      	beq.n	8001926 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001912:	4b83      	ldr	r3, [pc, #524]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	22f0      	movs	r2, #240	; 0xf0
 8001918:	4393      	bics	r3, r2
 800191a:	0019      	movs	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	4b7f      	ldr	r3, [pc, #508]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 8001922:	430a      	orrs	r2, r1
 8001924:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2201      	movs	r2, #1
 800192c:	4013      	ands	r3, r2
 800192e:	d100      	bne.n	8001932 <HAL_RCC_ClockConfig+0x8a>
 8001930:	e089      	b.n	8001a46 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d107      	bne.n	800194a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800193a:	4b79      	ldr	r3, [pc, #484]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	029b      	lsls	r3, r3, #10
 8001942:	4013      	ands	r3, r2
 8001944:	d120      	bne.n	8001988 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e0e1      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b03      	cmp	r3, #3
 8001950:	d107      	bne.n	8001962 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001952:	4b73      	ldr	r3, [pc, #460]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	049b      	lsls	r3, r3, #18
 800195a:	4013      	ands	r3, r2
 800195c:	d114      	bne.n	8001988 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e0d5      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d106      	bne.n	8001978 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800196a:	4b6d      	ldr	r3, [pc, #436]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2204      	movs	r2, #4
 8001970:	4013      	ands	r3, r2
 8001972:	d109      	bne.n	8001988 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0ca      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001978:	4b69      	ldr	r3, [pc, #420]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4013      	ands	r3, r2
 8001982:	d101      	bne.n	8001988 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0c2      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001988:	4b65      	ldr	r3, [pc, #404]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	2203      	movs	r2, #3
 800198e:	4393      	bics	r3, r2
 8001990:	0019      	movs	r1, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	4b62      	ldr	r3, [pc, #392]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 8001998:	430a      	orrs	r2, r1
 800199a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800199c:	f7ff f8bc 	bl	8000b18 <HAL_GetTick>
 80019a0:	0003      	movs	r3, r0
 80019a2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d111      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019ac:	e009      	b.n	80019c2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ae:	f7ff f8b3 	bl	8000b18 <HAL_GetTick>
 80019b2:	0002      	movs	r2, r0
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	4a58      	ldr	r2, [pc, #352]	; (8001b1c <HAL_RCC_ClockConfig+0x274>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e0a5      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c2:	4b57      	ldr	r3, [pc, #348]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	220c      	movs	r2, #12
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d1ef      	bne.n	80019ae <HAL_RCC_ClockConfig+0x106>
 80019ce:	e03a      	b.n	8001a46 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d111      	bne.n	80019fc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019d8:	e009      	b.n	80019ee <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019da:	f7ff f89d 	bl	8000b18 <HAL_GetTick>
 80019de:	0002      	movs	r2, r0
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	4a4d      	ldr	r2, [pc, #308]	; (8001b1c <HAL_RCC_ClockConfig+0x274>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e08f      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ee:	4b4c      	ldr	r3, [pc, #304]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	220c      	movs	r2, #12
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b0c      	cmp	r3, #12
 80019f8:	d1ef      	bne.n	80019da <HAL_RCC_ClockConfig+0x132>
 80019fa:	e024      	b.n	8001a46 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d11b      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a04:	e009      	b.n	8001a1a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a06:	f7ff f887 	bl	8000b18 <HAL_GetTick>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	4a42      	ldr	r2, [pc, #264]	; (8001b1c <HAL_RCC_ClockConfig+0x274>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e079      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a1a:	4b41      	ldr	r3, [pc, #260]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	220c      	movs	r2, #12
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d1ef      	bne.n	8001a06 <HAL_RCC_ClockConfig+0x15e>
 8001a26:	e00e      	b.n	8001a46 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a28:	f7ff f876 	bl	8000b18 <HAL_GetTick>
 8001a2c:	0002      	movs	r2, r0
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	4a3a      	ldr	r2, [pc, #232]	; (8001b1c <HAL_RCC_ClockConfig+0x274>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e068      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a3c:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	220c      	movs	r2, #12
 8001a42:	4013      	ands	r3, r2
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a46:	4b34      	ldr	r3, [pc, #208]	; (8001b18 <HAL_RCC_ClockConfig+0x270>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d21e      	bcs.n	8001a92 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a54:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <HAL_RCC_ClockConfig+0x270>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4393      	bics	r3, r2
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <HAL_RCC_ClockConfig+0x270>)
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a66:	f7ff f857 	bl	8000b18 <HAL_GetTick>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6e:	e009      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a70:	f7ff f852 	bl	8000b18 <HAL_GetTick>
 8001a74:	0002      	movs	r2, r0
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	4a28      	ldr	r2, [pc, #160]	; (8001b1c <HAL_RCC_ClockConfig+0x274>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e044      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a84:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <HAL_RCC_ClockConfig+0x270>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d1ee      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2204      	movs	r2, #4
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d009      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a9c:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	4a20      	ldr	r2, [pc, #128]	; (8001b24 <HAL_RCC_ClockConfig+0x27c>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	0019      	movs	r1, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 8001aac:	430a      	orrs	r2, r1
 8001aae:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2208      	movs	r2, #8
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d00a      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aba:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	4a1a      	ldr	r2, [pc, #104]	; (8001b28 <HAL_RCC_ClockConfig+0x280>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	0019      	movs	r1, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	00da      	lsls	r2, r3, #3
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 8001acc:	430a      	orrs	r2, r1
 8001ace:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ad0:	f000 f832 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 8001ad4:	0001      	movs	r1, r0
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_RCC_ClockConfig+0x278>)
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	091b      	lsrs	r3, r3, #4
 8001adc:	220f      	movs	r2, #15
 8001ade:	4013      	ands	r3, r2
 8001ae0:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <HAL_RCC_ClockConfig+0x284>)
 8001ae2:	5cd3      	ldrb	r3, [r2, r3]
 8001ae4:	000a      	movs	r2, r1
 8001ae6:	40da      	lsrs	r2, r3
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_RCC_ClockConfig+0x288>)
 8001aea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_RCC_ClockConfig+0x28c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	250b      	movs	r5, #11
 8001af2:	197c      	adds	r4, r7, r5
 8001af4:	0018      	movs	r0, r3
 8001af6:	f7fe ffc9 	bl	8000a8c <HAL_InitTick>
 8001afa:	0003      	movs	r3, r0
 8001afc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001afe:	197b      	adds	r3, r7, r5
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001b06:	197b      	adds	r3, r7, r5
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	0018      	movs	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b004      	add	sp, #16
 8001b14:	bdb0      	pop	{r4, r5, r7, pc}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	40022000 	.word	0x40022000
 8001b1c:	00001388 	.word	0x00001388
 8001b20:	40021000 	.word	0x40021000
 8001b24:	fffff8ff 	.word	0xfffff8ff
 8001b28:	ffffc7ff 	.word	0xffffc7ff
 8001b2c:	080040d8 	.word	0x080040d8
 8001b30:	20000004 	.word	0x20000004
 8001b34:	20000008 	.word	0x20000008

08001b38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b38:	b5b0      	push	{r4, r5, r7, lr}
 8001b3a:	b08e      	sub	sp, #56	; 0x38
 8001b3c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001b3e:	4b4c      	ldr	r3, [pc, #304]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b46:	230c      	movs	r3, #12
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b0c      	cmp	r3, #12
 8001b4c:	d014      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x40>
 8001b4e:	d900      	bls.n	8001b52 <HAL_RCC_GetSysClockFreq+0x1a>
 8001b50:	e07b      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x112>
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d002      	beq.n	8001b5c <HAL_RCC_GetSysClockFreq+0x24>
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d00b      	beq.n	8001b72 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b5a:	e076      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b5c:	4b44      	ldr	r3, [pc, #272]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2210      	movs	r2, #16
 8001b62:	4013      	ands	r3, r2
 8001b64:	d002      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001b66:	4b43      	ldr	r3, [pc, #268]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b68:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001b6a:	e07c      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001b6c:	4b42      	ldr	r3, [pc, #264]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b6e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b70:	e079      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b72:	4b42      	ldr	r3, [pc, #264]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x144>)
 8001b74:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b76:	e076      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7a:	0c9a      	lsrs	r2, r3, #18
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	401a      	ands	r2, r3
 8001b80:	4b3f      	ldr	r3, [pc, #252]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x148>)
 8001b82:	5c9b      	ldrb	r3, [r3, r2]
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b88:	0d9a      	lsrs	r2, r3, #22
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	3301      	adds	r3, #1
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b92:	4b37      	ldr	r3, [pc, #220]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	025b      	lsls	r3, r3, #9
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d01a      	beq.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	4a35      	ldr	r2, [pc, #212]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x144>)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	69b8      	ldr	r0, [r7, #24]
 8001bac:	69f9      	ldr	r1, [r7, #28]
 8001bae:	f7fe fb5f 	bl	8000270 <__aeabi_lmul>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	000b      	movs	r3, r1
 8001bb6:	0010      	movs	r0, r2
 8001bb8:	0019      	movs	r1, r3
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f7fe fb33 	bl	8000230 <__aeabi_uldivmod>
 8001bca:	0002      	movs	r2, r0
 8001bcc:	000b      	movs	r3, r1
 8001bce:	0013      	movs	r3, r2
 8001bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8001bd2:	e037      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001bd4:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2210      	movs	r2, #16
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d01a      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4a23      	ldr	r2, [pc, #140]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001be8:	2300      	movs	r3, #0
 8001bea:	68b8      	ldr	r0, [r7, #8]
 8001bec:	68f9      	ldr	r1, [r7, #12]
 8001bee:	f7fe fb3f 	bl	8000270 <__aeabi_lmul>
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	000b      	movs	r3, r1
 8001bf6:	0010      	movs	r0, r2
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	603b      	str	r3, [r7, #0]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f7fe fb13 	bl	8000230 <__aeabi_uldivmod>
 8001c0a:	0002      	movs	r2, r0
 8001c0c:	000b      	movs	r3, r1
 8001c0e:	0013      	movs	r3, r2
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
 8001c12:	e017      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c16:	0018      	movs	r0, r3
 8001c18:	2300      	movs	r3, #0
 8001c1a:	0019      	movs	r1, r3
 8001c1c:	4a16      	ldr	r2, [pc, #88]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x140>)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f7fe fb26 	bl	8000270 <__aeabi_lmul>
 8001c24:	0002      	movs	r2, r0
 8001c26:	000b      	movs	r3, r1
 8001c28:	0010      	movs	r0, r2
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	001c      	movs	r4, r3
 8001c30:	2300      	movs	r3, #0
 8001c32:	001d      	movs	r5, r3
 8001c34:	0022      	movs	r2, r4
 8001c36:	002b      	movs	r3, r5
 8001c38:	f7fe fafa 	bl	8000230 <__aeabi_uldivmod>
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	000b      	movs	r3, r1
 8001c40:	0013      	movs	r3, r2
 8001c42:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c46:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c48:	e00d      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	0b5b      	lsrs	r3, r3, #13
 8001c50:	2207      	movs	r2, #7
 8001c52:	4013      	ands	r3, r2
 8001c54:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0212      	lsls	r2, r2, #8
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	0013      	movs	r3, r2
 8001c62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c64:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c68:	0018      	movs	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b00e      	add	sp, #56	; 0x38
 8001c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c70:	40021000 	.word	0x40021000
 8001c74:	003d0900 	.word	0x003d0900
 8001c78:	00f42400 	.word	0x00f42400
 8001c7c:	007a1200 	.word	0x007a1200
 8001c80:	080040f0 	.word	0x080040f0

08001c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c88:	4b02      	ldr	r3, [pc, #8]	; (8001c94 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	20000004 	.word	0x20000004

08001c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c9c:	f7ff fff2 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001ca0:	0001      	movs	r1, r0
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	2207      	movs	r2, #7
 8001caa:	4013      	ands	r3, r2
 8001cac:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cae:	5cd3      	ldrb	r3, [r2, r3]
 8001cb0:	40d9      	lsrs	r1, r3
 8001cb2:	000b      	movs	r3, r1
}
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	080040e8 	.word	0x080040e8

08001cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cc8:	f7ff ffdc 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001ccc:	0001      	movs	r1, r0
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	0adb      	lsrs	r3, r3, #11
 8001cd4:	2207      	movs	r2, #7
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cda:	5cd3      	ldrb	r3, [r2, r3]
 8001cdc:	40d9      	lsrs	r1, r3
 8001cde:	000b      	movs	r3, r1
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	080040e8 	.word	0x080040e8

08001cf0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001cf8:	2317      	movs	r3, #23
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2220      	movs	r2, #32
 8001d06:	4013      	ands	r3, r2
 8001d08:	d106      	bne.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	4013      	ands	r3, r2
 8001d14:	d100      	bne.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001d16:	e0d9      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d18:	4b9c      	ldr	r3, [pc, #624]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	055b      	lsls	r3, r3, #21
 8001d20:	4013      	ands	r3, r2
 8001d22:	d10a      	bne.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d24:	4b99      	ldr	r3, [pc, #612]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d28:	4b98      	ldr	r3, [pc, #608]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d2a:	2180      	movs	r1, #128	; 0x80
 8001d2c:	0549      	lsls	r1, r1, #21
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d32:	2317      	movs	r3, #23
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3a:	4b95      	ldr	r3, [pc, #596]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4013      	ands	r3, r2
 8001d44:	d11a      	bne.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d46:	4b92      	ldr	r3, [pc, #584]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4b91      	ldr	r3, [pc, #580]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	0049      	lsls	r1, r1, #1
 8001d50:	430a      	orrs	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d54:	f7fe fee0 	bl	8000b18 <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5c:	e008      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5e:	f7fe fedb 	bl	8000b18 <HAL_GetTick>
 8001d62:	0002      	movs	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b64      	cmp	r3, #100	; 0x64
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e108      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	4b87      	ldr	r3, [pc, #540]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001d7c:	4b83      	ldr	r3, [pc, #524]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	23c0      	movs	r3, #192	; 0xc0
 8001d82:	039b      	lsls	r3, r3, #14
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	23c0      	movs	r3, #192	; 0xc0
 8001d8e:	039b      	lsls	r3, r3, #14
 8001d90:	4013      	ands	r3, r2
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d107      	bne.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	23c0      	movs	r3, #192	; 0xc0
 8001d9e:	039b      	lsls	r3, r3, #14
 8001da0:	4013      	ands	r3, r2
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d013      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	23c0      	movs	r3, #192	; 0xc0
 8001dae:	029b      	lsls	r3, r3, #10
 8001db0:	401a      	ands	r2, r3
 8001db2:	23c0      	movs	r3, #192	; 0xc0
 8001db4:	029b      	lsls	r3, r3, #10
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d10a      	bne.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001dba:	4b74      	ldr	r3, [pc, #464]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	029b      	lsls	r3, r3, #10
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	029b      	lsls	r3, r3, #10
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0d8      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001dd0:	4b6e      	ldr	r3, [pc, #440]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001dd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dd4:	23c0      	movs	r3, #192	; 0xc0
 8001dd6:	029b      	lsls	r3, r3, #10
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d049      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	23c0      	movs	r3, #192	; 0xc0
 8001de8:	029b      	lsls	r3, r3, #10
 8001dea:	4013      	ands	r3, r2
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d004      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2220      	movs	r2, #32
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d10d      	bne.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	23c0      	movs	r3, #192	; 0xc0
 8001e02:	029b      	lsls	r3, r3, #10
 8001e04:	4013      	ands	r3, r2
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d034      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	4013      	ands	r3, r2
 8001e16:	d02e      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001e18:	4b5c      	ldr	r3, [pc, #368]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e1c:	4a5d      	ldr	r2, [pc, #372]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e22:	4b5a      	ldr	r3, [pc, #360]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e26:	4b59      	ldr	r3, [pc, #356]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e28:	2180      	movs	r1, #128	; 0x80
 8001e2a:	0309      	lsls	r1, r1, #12
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e30:	4b56      	ldr	r3, [pc, #344]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e34:	4b55      	ldr	r3, [pc, #340]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e36:	4958      	ldr	r1, [pc, #352]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001e38:	400a      	ands	r2, r1
 8001e3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001e3c:	4b53      	ldr	r3, [pc, #332]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d014      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7fe fe64 	bl	8000b18 <HAL_GetTick>
 8001e50:	0003      	movs	r3, r0
 8001e52:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e54:	e009      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7fe fe5f 	bl	8000b18 <HAL_GetTick>
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	4a4e      	ldr	r2, [pc, #312]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e08b      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e6a:	4b48      	ldr	r3, [pc, #288]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4013      	ands	r3, r2
 8001e74:	d0ef      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	23c0      	movs	r3, #192	; 0xc0
 8001e7c:	029b      	lsls	r3, r3, #10
 8001e7e:	401a      	ands	r2, r3
 8001e80:	23c0      	movs	r3, #192	; 0xc0
 8001e82:	029b      	lsls	r3, r3, #10
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d10c      	bne.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001e88:	4b40      	ldr	r3, [pc, #256]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a44      	ldr	r2, [pc, #272]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	0019      	movs	r1, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	23c0      	movs	r3, #192	; 0xc0
 8001e98:	039b      	lsls	r3, r3, #14
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	4b3b      	ldr	r3, [pc, #236]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	4b3a      	ldr	r3, [pc, #232]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ea4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	23c0      	movs	r3, #192	; 0xc0
 8001eac:	029b      	lsls	r3, r3, #10
 8001eae:	401a      	ands	r2, r3
 8001eb0:	4b36      	ldr	r3, [pc, #216]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001eb6:	2317      	movs	r3, #23
 8001eb8:	18fb      	adds	r3, r7, r3
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d105      	bne.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec0:	4b32      	ldr	r3, [pc, #200]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ec4:	4b31      	ldr	r3, [pc, #196]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ec6:	4937      	ldr	r1, [pc, #220]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8001ec8:	400a      	ands	r2, r1
 8001eca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d009      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ed6:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	2203      	movs	r2, #3
 8001edc:	4393      	bics	r3, r2
 8001ede:	0019      	movs	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d009      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ef4:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef8:	220c      	movs	r2, #12
 8001efa:	4393      	bics	r3, r2
 8001efc:	0019      	movs	r1, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691a      	ldr	r2, [r3, #16]
 8001f02:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f04:	430a      	orrs	r2, r1
 8001f06:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d009      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f12:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	4a24      	ldr	r2, [pc, #144]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	695a      	ldr	r2, [r3, #20]
 8001f20:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f22:	430a      	orrs	r2, r1
 8001f24:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2208      	movs	r2, #8
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d009      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f30:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f34:	4a1d      	ldr	r2, [pc, #116]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	0019      	movs	r1, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699a      	ldr	r2, [r3, #24]
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f40:	430a      	orrs	r2, r1
 8001f42:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2240      	movs	r2, #64	; 0x40
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d009      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	4a17      	ldr	r2, [pc, #92]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	0019      	movs	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1a      	ldr	r2, [r3, #32]
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2280      	movs	r2, #128	; 0x80
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d009      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001f6c:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f70:	4a10      	ldr	r2, [pc, #64]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	0019      	movs	r1, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69da      	ldr	r2, [r3, #28]
 8001f7a:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	0018      	movs	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b006      	add	sp, #24
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40007000 	.word	0x40007000
 8001f94:	fffcffff 	.word	0xfffcffff
 8001f98:	fff7ffff 	.word	0xfff7ffff
 8001f9c:	00001388 	.word	0x00001388
 8001fa0:	ffcfffff 	.word	0xffcfffff
 8001fa4:	efffffff 	.word	0xefffffff
 8001fa8:	fffff3ff 	.word	0xfffff3ff
 8001fac:	ffffcfff 	.word	0xffffcfff
 8001fb0:	fbffffff 	.word	0xfbffffff
 8001fb4:	fff3ffff 	.word	0xfff3ffff

08001fb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e083      	b.n	80020d2 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d109      	bne.n	8001fe6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	2382      	movs	r3, #130	; 0x82
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d009      	beq.n	8001ff2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	61da      	str	r2, [r3, #28]
 8001fe4:	e005      	b.n	8001ff2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2251      	movs	r2, #81	; 0x51
 8001ffc:	5c9b      	ldrb	r3, [r3, r2]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d107      	bne.n	8002014 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2250      	movs	r2, #80	; 0x50
 8002008:	2100      	movs	r1, #0
 800200a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	0018      	movs	r0, r3
 8002010:	f7fe fc22 	bl	8000858 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2251      	movs	r2, #81	; 0x51
 8002018:	2102      	movs	r1, #2
 800201a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2140      	movs	r1, #64	; 0x40
 8002028:	438a      	bics	r2, r1
 800202a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	2382      	movs	r3, #130	; 0x82
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	401a      	ands	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6899      	ldr	r1, [r3, #8]
 800203a:	2384      	movs	r3, #132	; 0x84
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	400b      	ands	r3, r1
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68d9      	ldr	r1, [r3, #12]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	400b      	ands	r3, r1
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	2102      	movs	r1, #2
 8002054:	400b      	ands	r3, r1
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	2101      	movs	r1, #1
 800205e:	400b      	ands	r3, r1
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6999      	ldr	r1, [r3, #24]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	400b      	ands	r3, r1
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	2138      	movs	r1, #56	; 0x38
 8002074:	400b      	ands	r3, r1
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	2180      	movs	r1, #128	; 0x80
 800207e:	400b      	ands	r3, r1
 8002080:	431a      	orrs	r2, r3
 8002082:	0011      	movs	r1, r2
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	019b      	lsls	r3, r3, #6
 800208c:	401a      	ands	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	0c1b      	lsrs	r3, r3, #16
 800209c:	2204      	movs	r2, #4
 800209e:	4013      	ands	r3, r2
 80020a0:	0019      	movs	r1, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	2210      	movs	r2, #16
 80020a8:	401a      	ands	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	69da      	ldr	r2, [r3, #28]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4907      	ldr	r1, [pc, #28]	; (80020dc <HAL_SPI_Init+0x124>)
 80020be:	400a      	ands	r2, r1
 80020c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2251      	movs	r2, #81	; 0x51
 80020cc:	2101      	movs	r1, #1
 80020ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	0018      	movs	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b002      	add	sp, #8
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	fffff7ff 	.word	0xfffff7ff

080020e0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	1dbb      	adds	r3, r7, #6
 80020ee:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020f0:	2317      	movs	r3, #23
 80020f2:	18fb      	adds	r3, r7, r3
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	2382      	movs	r3, #130	; 0x82
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	429a      	cmp	r2, r3
 8002102:	d113      	bne.n	800212c <HAL_SPI_Receive+0x4c>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10f      	bne.n	800212c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2251      	movs	r2, #81	; 0x51
 8002110:	2104      	movs	r1, #4
 8002112:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002114:	1dbb      	adds	r3, r7, #6
 8002116:	881c      	ldrh	r4, [r3, #0]
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	68b9      	ldr	r1, [r7, #8]
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	0023      	movs	r3, r4
 8002124:	f000 f902 	bl	800232c <HAL_SPI_TransmitReceive>
 8002128:	0003      	movs	r3, r0
 800212a:	e0f9      	b.n	8002320 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2250      	movs	r2, #80	; 0x50
 8002130:	5c9b      	ldrb	r3, [r3, r2]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_SPI_Receive+0x5a>
 8002136:	2302      	movs	r3, #2
 8002138:	e0f2      	b.n	8002320 <HAL_SPI_Receive+0x240>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2250      	movs	r2, #80	; 0x50
 800213e:	2101      	movs	r1, #1
 8002140:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002142:	f7fe fce9 	bl	8000b18 <HAL_GetTick>
 8002146:	0003      	movs	r3, r0
 8002148:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2251      	movs	r2, #81	; 0x51
 800214e:	5c9b      	ldrb	r3, [r3, r2]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b01      	cmp	r3, #1
 8002154:	d004      	beq.n	8002160 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002156:	2317      	movs	r3, #23
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	2202      	movs	r2, #2
 800215c:	701a      	strb	r2, [r3, #0]
    goto error;
 800215e:	e0d4      	b.n	800230a <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_SPI_Receive+0x8e>
 8002166:	1dbb      	adds	r3, r7, #6
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d104      	bne.n	8002178 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800216e:	2317      	movs	r3, #23
 8002170:	18fb      	adds	r3, r7, r3
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
    goto error;
 8002176:	e0c8      	b.n	800230a <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2251      	movs	r2, #81	; 0x51
 800217c:	2104      	movs	r1, #4
 800217e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1dba      	adds	r2, r7, #6
 8002190:	8812      	ldrh	r2, [r2, #0]
 8002192:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1dba      	adds	r2, r7, #6
 8002198:	8812      	ldrh	r2, [r2, #0]
 800219a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d10f      	bne.n	80021e6 <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2140      	movs	r1, #64	; 0x40
 80021d2:	438a      	bics	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4951      	ldr	r1, [pc, #324]	; (8002328 <HAL_SPI_Receive+0x248>)
 80021e2:	400a      	ands	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2240      	movs	r2, #64	; 0x40
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b40      	cmp	r3, #64	; 0x40
 80021f2:	d007      	beq.n	8002204 <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2140      	movs	r1, #64	; 0x40
 8002200:	430a      	orrs	r2, r1
 8002202:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d164      	bne.n	80022d6 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800220c:	e02f      	b.n	800226e <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2201      	movs	r2, #1
 8002216:	4013      	ands	r3, r2
 8002218:	2b01      	cmp	r3, #1
 800221a:	d115      	bne.n	8002248 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	330c      	adds	r3, #12
 8002222:	001a      	movs	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002228:	7812      	ldrb	r2, [r2, #0]
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800223c:	b29b      	uxth	r3, r3
 800223e:	3b01      	subs	r3, #1
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002246:	e012      	b.n	800226e <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002248:	f7fe fc66 	bl	8000b18 <HAL_GetTick>
 800224c:	0002      	movs	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d802      	bhi.n	800225e <HAL_SPI_Receive+0x17e>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	3301      	adds	r3, #1
 800225c:	d102      	bne.n	8002264 <HAL_SPI_Receive+0x184>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d104      	bne.n	800226e <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8002264:	2317      	movs	r3, #23
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	2203      	movs	r2, #3
 800226a:	701a      	strb	r2, [r3, #0]
          goto error;
 800226c:	e04d      	b.n	800230a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002272:	b29b      	uxth	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1ca      	bne.n	800220e <HAL_SPI_Receive+0x12e>
 8002278:	e032      	b.n	80022e0 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2201      	movs	r2, #1
 8002282:	4013      	ands	r3, r2
 8002284:	2b01      	cmp	r3, #1
 8002286:	d113      	bne.n	80022b0 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002292:	b292      	uxth	r2, r2
 8002294:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229a:	1c9a      	adds	r2, r3, #2
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022ae:	e012      	b.n	80022d6 <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022b0:	f7fe fc32 	bl	8000b18 <HAL_GetTick>
 80022b4:	0002      	movs	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d802      	bhi.n	80022c6 <HAL_SPI_Receive+0x1e6>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	3301      	adds	r3, #1
 80022c4:	d102      	bne.n	80022cc <HAL_SPI_Receive+0x1ec>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d104      	bne.n	80022d6 <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 80022cc:	2317      	movs	r3, #23
 80022ce:	18fb      	adds	r3, r7, r3
 80022d0:	2203      	movs	r2, #3
 80022d2:	701a      	strb	r2, [r3, #0]
          goto error;
 80022d4:	e019      	b.n	800230a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1cc      	bne.n	800227a <HAL_SPI_Receive+0x19a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	6839      	ldr	r1, [r7, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	0018      	movs	r0, r3
 80022e8:	f000 fb86 	bl	80029f8 <SPI_EndRxTransaction>
 80022ec:	1e03      	subs	r3, r0, #0
 80022ee:	d002      	beq.n	80022f6 <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2220      	movs	r2, #32
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d004      	beq.n	8002308 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 80022fe:	2317      	movs	r3, #23
 8002300:	18fb      	adds	r3, r7, r3
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]
 8002306:	e000      	b.n	800230a <HAL_SPI_Receive+0x22a>
  }

error :
 8002308:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2251      	movs	r2, #81	; 0x51
 800230e:	2101      	movs	r1, #1
 8002310:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2250      	movs	r2, #80	; 0x50
 8002316:	2100      	movs	r1, #0
 8002318:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800231a:	2317      	movs	r3, #23
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	781b      	ldrb	r3, [r3, #0]
}
 8002320:	0018      	movs	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	b007      	add	sp, #28
 8002326:	bd90      	pop	{r4, r7, pc}
 8002328:	ffffbfff 	.word	0xffffbfff

0800232c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08c      	sub	sp, #48	; 0x30
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	001a      	movs	r2, r3
 800233a:	1cbb      	adds	r3, r7, #2
 800233c:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800233e:	2301      	movs	r3, #1
 8002340:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002342:	232b      	movs	r3, #43	; 0x2b
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2250      	movs	r2, #80	; 0x50
 800234e:	5c9b      	ldrb	r3, [r3, r2]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_SPI_TransmitReceive+0x2c>
 8002354:	2302      	movs	r3, #2
 8002356:	e1a0      	b.n	800269a <HAL_SPI_TransmitReceive+0x36e>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2250      	movs	r2, #80	; 0x50
 800235c:	2101      	movs	r1, #1
 800235e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002360:	f7fe fbda 	bl	8000b18 <HAL_GetTick>
 8002364:	0003      	movs	r3, r0
 8002366:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002368:	2023      	movs	r0, #35	; 0x23
 800236a:	183b      	adds	r3, r7, r0
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	2151      	movs	r1, #81	; 0x51
 8002370:	5c52      	ldrb	r2, [r2, r1]
 8002372:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800237a:	231a      	movs	r3, #26
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	1cba      	adds	r2, r7, #2
 8002380:	8812      	ldrh	r2, [r2, #0]
 8002382:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002384:	183b      	adds	r3, r7, r0
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d011      	beq.n	80023b0 <HAL_SPI_TransmitReceive+0x84>
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	2382      	movs	r3, #130	; 0x82
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	429a      	cmp	r2, r3
 8002394:	d107      	bne.n	80023a6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d103      	bne.n	80023a6 <HAL_SPI_TransmitReceive+0x7a>
 800239e:	183b      	adds	r3, r7, r0
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d004      	beq.n	80023b0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80023a6:	232b      	movs	r3, #43	; 0x2b
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	2202      	movs	r2, #2
 80023ac:	701a      	strb	r2, [r3, #0]
    goto error;
 80023ae:	e169      	b.n	8002684 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d006      	beq.n	80023c4 <HAL_SPI_TransmitReceive+0x98>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_SPI_TransmitReceive+0x98>
 80023bc:	1cbb      	adds	r3, r7, #2
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d104      	bne.n	80023ce <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80023c4:	232b      	movs	r3, #43	; 0x2b
 80023c6:	18fb      	adds	r3, r7, r3
 80023c8:	2201      	movs	r2, #1
 80023ca:	701a      	strb	r2, [r3, #0]
    goto error;
 80023cc:	e15a      	b.n	8002684 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2251      	movs	r2, #81	; 0x51
 80023d2:	5c9b      	ldrb	r3, [r3, r2]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d003      	beq.n	80023e2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2251      	movs	r2, #81	; 0x51
 80023de:	2105      	movs	r1, #5
 80023e0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1cba      	adds	r2, r7, #2
 80023f2:	8812      	ldrh	r2, [r2, #0]
 80023f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1cba      	adds	r2, r7, #2
 80023fa:	8812      	ldrh	r2, [r2, #0]
 80023fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1cba      	adds	r2, r7, #2
 8002408:	8812      	ldrh	r2, [r2, #0]
 800240a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	1cba      	adds	r2, r7, #2
 8002410:	8812      	ldrh	r2, [r2, #0]
 8002412:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2240      	movs	r2, #64	; 0x40
 8002428:	4013      	ands	r3, r2
 800242a:	2b40      	cmp	r3, #64	; 0x40
 800242c:	d007      	beq.n	800243e <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2140      	movs	r1, #64	; 0x40
 800243a:	430a      	orrs	r2, r1
 800243c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	429a      	cmp	r2, r3
 8002448:	d000      	beq.n	800244c <HAL_SPI_TransmitReceive+0x120>
 800244a:	e07a      	b.n	8002542 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d004      	beq.n	800245e <HAL_SPI_TransmitReceive+0x132>
 8002454:	231a      	movs	r3, #26
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d166      	bne.n	800252c <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	881a      	ldrh	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	1c9a      	adds	r2, r3, #2
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002478:	b29b      	uxth	r3, r3
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002482:	e053      	b.n	800252c <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2202      	movs	r2, #2
 800248c:	4013      	ands	r3, r2
 800248e:	2b02      	cmp	r3, #2
 8002490:	d11b      	bne.n	80024ca <HAL_SPI_TransmitReceive+0x19e>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d016      	beq.n	80024ca <HAL_SPI_TransmitReceive+0x19e>
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d113      	bne.n	80024ca <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	881a      	ldrh	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	1c9a      	adds	r2, r3, #2
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2201      	movs	r2, #1
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d119      	bne.n	800250c <HAL_SPI_TransmitReceive+0x1e0>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d014      	beq.n	800250c <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ec:	b292      	uxth	r2, r2
 80024ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f4:	1c9a      	adds	r2, r3, #2
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024fe:	b29b      	uxth	r3, r3
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002508:	2301      	movs	r3, #1
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800250c:	f7fe fb04 	bl	8000b18 <HAL_GetTick>
 8002510:	0002      	movs	r2, r0
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002518:	429a      	cmp	r2, r3
 800251a:	d807      	bhi.n	800252c <HAL_SPI_TransmitReceive+0x200>
 800251c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800251e:	3301      	adds	r3, #1
 8002520:	d004      	beq.n	800252c <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 8002522:	232b      	movs	r3, #43	; 0x2b
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	2203      	movs	r2, #3
 8002528:	701a      	strb	r2, [r3, #0]
        goto error;
 800252a:	e0ab      	b.n	8002684 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002530:	b29b      	uxth	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1a6      	bne.n	8002484 <HAL_SPI_TransmitReceive+0x158>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800253a:	b29b      	uxth	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1a1      	bne.n	8002484 <HAL_SPI_TransmitReceive+0x158>
 8002540:	e07f      	b.n	8002642 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d005      	beq.n	8002556 <HAL_SPI_TransmitReceive+0x22a>
 800254a:	231a      	movs	r3, #26
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d000      	beq.n	8002556 <HAL_SPI_TransmitReceive+0x22a>
 8002554:	e06b      	b.n	800262e <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	330c      	adds	r3, #12
 8002560:	7812      	ldrb	r2, [r2, #0]
 8002562:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002572:	b29b      	uxth	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800257c:	e057      	b.n	800262e <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2202      	movs	r2, #2
 8002586:	4013      	ands	r3, r2
 8002588:	2b02      	cmp	r3, #2
 800258a:	d11c      	bne.n	80025c6 <HAL_SPI_TransmitReceive+0x29a>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d017      	beq.n	80025c6 <HAL_SPI_TransmitReceive+0x29a>
 8002596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002598:	2b01      	cmp	r3, #1
 800259a:	d114      	bne.n	80025c6 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	330c      	adds	r3, #12
 80025a6:	7812      	ldrb	r2, [r2, #0]
 80025a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2201      	movs	r2, #1
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d119      	bne.n	8002608 <HAL_SPI_TransmitReceive+0x2dc>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d014      	beq.n	8002608 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002604:	2301      	movs	r3, #1
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002608:	f7fe fa86 	bl	8000b18 <HAL_GetTick>
 800260c:	0002      	movs	r2, r0
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002614:	429a      	cmp	r2, r3
 8002616:	d802      	bhi.n	800261e <HAL_SPI_TransmitReceive+0x2f2>
 8002618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261a:	3301      	adds	r3, #1
 800261c:	d102      	bne.n	8002624 <HAL_SPI_TransmitReceive+0x2f8>
 800261e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002620:	2b00      	cmp	r3, #0
 8002622:	d104      	bne.n	800262e <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8002624:	232b      	movs	r3, #43	; 0x2b
 8002626:	18fb      	adds	r3, r7, r3
 8002628:	2203      	movs	r2, #3
 800262a:	701a      	strb	r2, [r3, #0]
        goto error;
 800262c:	e02a      	b.n	8002684 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002632:	b29b      	uxth	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1a2      	bne.n	800257e <HAL_SPI_TransmitReceive+0x252>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d19d      	bne.n	800257e <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002644:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	0018      	movs	r0, r3
 800264a:	f000 fa3f 	bl	8002acc <SPI_EndRxTxTransaction>
 800264e:	1e03      	subs	r3, r0, #0
 8002650:	d007      	beq.n	8002662 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8002652:	232b      	movs	r3, #43	; 0x2b
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002660:	e010      	b.n	8002684 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10b      	bne.n	8002682 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	e000      	b.n	8002684 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8002682:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2251      	movs	r2, #81	; 0x51
 8002688:	2101      	movs	r1, #1
 800268a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2250      	movs	r2, #80	; 0x50
 8002690:	2100      	movs	r1, #0
 8002692:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002694:	232b      	movs	r3, #43	; 0x2b
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	781b      	ldrb	r3, [r3, #0]
}
 800269a:	0018      	movs	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	b00c      	add	sp, #48	; 0x30
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	099b      	lsrs	r3, r3, #6
 80026c0:	001a      	movs	r2, r3
 80026c2:	2301      	movs	r3, #1
 80026c4:	4013      	ands	r3, r2
 80026c6:	d10f      	bne.n	80026e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2201      	movs	r2, #1
 80026cc:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80026ce:	d00b      	beq.n	80026e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	099b      	lsrs	r3, r3, #6
 80026d4:	001a      	movs	r2, r3
 80026d6:	2301      	movs	r3, #1
 80026d8:	4013      	ands	r3, r2
 80026da:	d005      	beq.n	80026e8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	0010      	movs	r0, r2
 80026e4:	4798      	blx	r3
    return;
 80026e6:	e0d5      	b.n	8002894 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	085b      	lsrs	r3, r3, #1
 80026ec:	001a      	movs	r2, r3
 80026ee:	2301      	movs	r3, #1
 80026f0:	4013      	ands	r3, r2
 80026f2:	d00b      	beq.n	800270c <HAL_SPI_IRQHandler+0x68>
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	09db      	lsrs	r3, r3, #7
 80026f8:	001a      	movs	r2, r3
 80026fa:	2301      	movs	r3, #1
 80026fc:	4013      	ands	r3, r2
 80026fe:	d005      	beq.n	800270c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	0010      	movs	r0, r2
 8002708:	4798      	blx	r3
    return;
 800270a:	e0c3      	b.n	8002894 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	001a      	movs	r2, r3
 8002712:	2301      	movs	r3, #1
 8002714:	4013      	ands	r3, r2
 8002716:	d10c      	bne.n	8002732 <HAL_SPI_IRQHandler+0x8e>
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	099b      	lsrs	r3, r3, #6
 800271c:	001a      	movs	r2, r3
 800271e:	2301      	movs	r3, #1
 8002720:	4013      	ands	r3, r2
 8002722:	d106      	bne.n	8002732 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	001a      	movs	r2, r3
 800272a:	2301      	movs	r3, #1
 800272c:	4013      	ands	r3, r2
 800272e:	d100      	bne.n	8002732 <HAL_SPI_IRQHandler+0x8e>
 8002730:	e0b0      	b.n	8002894 <HAL_SPI_IRQHandler+0x1f0>
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	001a      	movs	r2, r3
 8002738:	2301      	movs	r3, #1
 800273a:	4013      	ands	r3, r2
 800273c:	d100      	bne.n	8002740 <HAL_SPI_IRQHandler+0x9c>
 800273e:	e0a9      	b.n	8002894 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	099b      	lsrs	r3, r3, #6
 8002744:	001a      	movs	r2, r3
 8002746:	2301      	movs	r3, #1
 8002748:	4013      	ands	r3, r2
 800274a:	d023      	beq.n	8002794 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2251      	movs	r2, #81	; 0x51
 8002750:	5c9b      	ldrb	r3, [r3, r2]
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b03      	cmp	r3, #3
 8002756:	d011      	beq.n	800277c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	2204      	movs	r2, #4
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	e00b      	b.n	8002794 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800277c:	2300      	movs	r3, #0
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	693b      	ldr	r3, [r7, #16]
        return;
 8002792:	e07f      	b.n	8002894 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	001a      	movs	r2, r3
 800279a:	2301      	movs	r3, #1
 800279c:	4013      	ands	r3, r2
 800279e:	d014      	beq.n	80027ca <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	2201      	movs	r2, #1
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2140      	movs	r1, #64	; 0x40
 80027c4:	438a      	bics	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	001a      	movs	r2, r3
 80027d0:	2301      	movs	r3, #1
 80027d2:	4013      	ands	r3, r2
 80027d4:	d00c      	beq.n	80027f0 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027da:	2208      	movs	r2, #8
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d04c      	beq.n	8002892 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	21e0      	movs	r1, #224	; 0xe0
 8002804:	438a      	bics	r2, r1
 8002806:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2251      	movs	r2, #81	; 0x51
 800280c:	2101      	movs	r1, #1
 800280e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	2202      	movs	r2, #2
 8002814:	4013      	ands	r3, r2
 8002816:	d103      	bne.n	8002820 <HAL_SPI_IRQHandler+0x17c>
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	2201      	movs	r2, #1
 800281c:	4013      	ands	r3, r2
 800281e:	d032      	beq.n	8002886 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2103      	movs	r1, #3
 800282c:	438a      	bics	r2, r1
 800282e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d010      	beq.n	800285a <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283c:	4a17      	ldr	r2, [pc, #92]	; (800289c <HAL_SPI_IRQHandler+0x1f8>)
 800283e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002844:	0018      	movs	r0, r3
 8002846:	f7fe fa8f 	bl	8000d68 <HAL_DMA_Abort_IT>
 800284a:	1e03      	subs	r3, r0, #0
 800284c:	d005      	beq.n	800285a <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002852:	2240      	movs	r2, #64	; 0x40
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800285e:	2b00      	cmp	r3, #0
 8002860:	d016      	beq.n	8002890 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002866:	4a0d      	ldr	r2, [pc, #52]	; (800289c <HAL_SPI_IRQHandler+0x1f8>)
 8002868:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800286e:	0018      	movs	r0, r3
 8002870:	f7fe fa7a 	bl	8000d68 <HAL_DMA_Abort_IT>
 8002874:	1e03      	subs	r3, r0, #0
 8002876:	d00b      	beq.n	8002890 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	2240      	movs	r2, #64	; 0x40
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002884:	e004      	b.n	8002890 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	0018      	movs	r0, r3
 800288a:	f000 f809 	bl	80028a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800288e:	e000      	b.n	8002892 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8002890:	46c0      	nop			; (mov r8, r8)
    return;
 8002892:	46c0      	nop			; (mov r8, r8)
  }
}
 8002894:	46bd      	mov	sp, r7
 8002896:	b008      	add	sp, #32
 8002898:	bd80      	pop	{r7, pc}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	080028b1 	.word	0x080028b1

080028a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80028a8:	46c0      	nop			; (mov r8, r8)
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b002      	add	sp, #8
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	0018      	movs	r0, r3
 80028ce:	f7ff ffe7 	bl	80028a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b004      	add	sp, #16
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	1dfb      	adds	r3, r7, #7
 80028ea:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028ec:	f7fe f914 	bl	8000b18 <HAL_GetTick>
 80028f0:	0002      	movs	r2, r0
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	18d3      	adds	r3, r2, r3
 80028fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028fc:	f7fe f90c 	bl	8000b18 <HAL_GetTick>
 8002900:	0003      	movs	r3, r0
 8002902:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002904:	4b3a      	ldr	r3, [pc, #232]	; (80029f0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	015b      	lsls	r3, r3, #5
 800290a:	0d1b      	lsrs	r3, r3, #20
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	4353      	muls	r3, r2
 8002910:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002912:	e058      	b.n	80029c6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	3301      	adds	r3, #1
 8002918:	d055      	beq.n	80029c6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800291a:	f7fe f8fd 	bl	8000b18 <HAL_GetTick>
 800291e:	0002      	movs	r2, r0
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	429a      	cmp	r2, r3
 8002928:	d902      	bls.n	8002930 <SPI_WaitFlagStateUntilTimeout+0x54>
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d142      	bne.n	80029b6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	21e0      	movs	r1, #224	; 0xe0
 800293c:	438a      	bics	r2, r1
 800293e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	2382      	movs	r3, #130	; 0x82
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	429a      	cmp	r2, r3
 800294a:	d113      	bne.n	8002974 <SPI_WaitFlagStateUntilTimeout+0x98>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	2380      	movs	r3, #128	; 0x80
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	429a      	cmp	r2, r3
 8002956:	d005      	beq.n	8002964 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	429a      	cmp	r2, r3
 8002962:	d107      	bne.n	8002974 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2140      	movs	r1, #64	; 0x40
 8002970:	438a      	bics	r2, r1
 8002972:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	019b      	lsls	r3, r3, #6
 800297c:	429a      	cmp	r2, r3
 800297e:	d110      	bne.n	80029a2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	491a      	ldr	r1, [pc, #104]	; (80029f4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800298c:	400a      	ands	r2, r1
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2180      	movs	r1, #128	; 0x80
 800299c:	0189      	lsls	r1, r1, #6
 800299e:	430a      	orrs	r2, r1
 80029a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2251      	movs	r2, #81	; 0x51
 80029a6:	2101      	movs	r1, #1
 80029a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2250      	movs	r2, #80	; 0x50
 80029ae:	2100      	movs	r1, #0
 80029b0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e017      	b.n	80029e6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	4013      	ands	r3, r2
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	425a      	negs	r2, r3
 80029d6:	4153      	adcs	r3, r2
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	001a      	movs	r2, r3
 80029dc:	1dfb      	adds	r3, r7, #7
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d197      	bne.n	8002914 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	0018      	movs	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b008      	add	sp, #32
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	20000004 	.word	0x20000004
 80029f4:	ffffdfff 	.word	0xffffdfff

080029f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	2382      	movs	r3, #130	; 0x82
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d113      	bne.n	8002a38 <SPI_EndRxTransaction+0x40>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	021b      	lsls	r3, r3, #8
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d005      	beq.n	8002a28 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	2380      	movs	r3, #128	; 0x80
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d107      	bne.n	8002a38 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2140      	movs	r1, #64	; 0x40
 8002a34:	438a      	bics	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	2382      	movs	r3, #130	; 0x82
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d12b      	bne.n	8002a9c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	2380      	movs	r3, #128	; 0x80
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d012      	beq.n	8002a76 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	0013      	movs	r3, r2
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2180      	movs	r1, #128	; 0x80
 8002a5e:	f7ff ff3d 	bl	80028dc <SPI_WaitFlagStateUntilTimeout>
 8002a62:	1e03      	subs	r3, r0, #0
 8002a64:	d02d      	beq.n	8002ac2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e026      	b.n	8002ac4 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	0013      	movs	r3, r2
 8002a80:	2200      	movs	r2, #0
 8002a82:	2101      	movs	r1, #1
 8002a84:	f7ff ff2a 	bl	80028dc <SPI_WaitFlagStateUntilTimeout>
 8002a88:	1e03      	subs	r3, r0, #0
 8002a8a:	d01a      	beq.n	8002ac2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a90:	2220      	movs	r2, #32
 8002a92:	431a      	orrs	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e013      	b.n	8002ac4 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	0013      	movs	r3, r2
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	f7ff ff17 	bl	80028dc <SPI_WaitFlagStateUntilTimeout>
 8002aae:	1e03      	subs	r3, r0, #0
 8002ab0:	d007      	beq.n	8002ac2 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e000      	b.n	8002ac4 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b004      	add	sp, #16
 8002aca:	bd80      	pop	{r7, pc}

08002acc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af02      	add	r7, sp, #8
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <SPI_EndRxTxTransaction+0x84>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	491d      	ldr	r1, [pc, #116]	; (8002b54 <SPI_EndRxTxTransaction+0x88>)
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f7fd fb1a 	bl	8000118 <__udivsi3>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	001a      	movs	r2, r3
 8002ae8:	0013      	movs	r3, r2
 8002aea:	015b      	lsls	r3, r3, #5
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	189b      	adds	r3, r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	2382      	movs	r3, #130	; 0x82
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d112      	bne.n	8002b28 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	0013      	movs	r3, r2
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2180      	movs	r1, #128	; 0x80
 8002b10:	f7ff fee4 	bl	80028dc <SPI_WaitFlagStateUntilTimeout>
 8002b14:	1e03      	subs	r3, r0, #0
 8002b16:	d016      	beq.n	8002b46 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e00f      	b.n	8002b48 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2280      	movs	r2, #128	; 0x80
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b80      	cmp	r3, #128	; 0x80
 8002b40:	d0f2      	beq.n	8002b28 <SPI_EndRxTxTransaction+0x5c>
 8002b42:	e000      	b.n	8002b46 <SPI_EndRxTxTransaction+0x7a>
        break;
 8002b44:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	0018      	movs	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b006      	add	sp, #24
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20000004 	.word	0x20000004
 8002b54:	016e3600 	.word	0x016e3600

08002b58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e044      	b.n	8002bf4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d107      	bne.n	8002b82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2274      	movs	r2, #116	; 0x74
 8002b76:	2100      	movs	r1, #0
 8002b78:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f7fd feb9 	bl	80008f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2224      	movs	r2, #36	; 0x24
 8002b86:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2101      	movs	r1, #1
 8002b94:	438a      	bics	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f000 fc4e 	bl	800343c <UART_SetConfig>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e024      	b.n	8002bf4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f000 fec5 	bl	8003944 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	490d      	ldr	r1, [pc, #52]	; (8002bfc <HAL_UART_Init+0xa4>)
 8002bc6:	400a      	ands	r2, r1
 8002bc8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	212a      	movs	r1, #42	; 0x2a
 8002bd6:	438a      	bics	r2, r1
 8002bd8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2101      	movs	r1, #1
 8002be6:	430a      	orrs	r2, r1
 8002be8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	0018      	movs	r0, r3
 8002bee:	f000 ff5d 	bl	8003aac <UART_CheckIdleState>
 8002bf2:	0003      	movs	r3, r0
}
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b002      	add	sp, #8
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	ffffb7ff 	.word	0xffffb7ff

08002c00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08a      	sub	sp, #40	; 0x28
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	1dbb      	adds	r3, r7, #6
 8002c0e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d000      	beq.n	8002c1a <HAL_UART_Transmit+0x1a>
 8002c18:	e095      	b.n	8002d46 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_UART_Transmit+0x28>
 8002c20:	1dbb      	adds	r3, r7, #6
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e08d      	b.n	8002d48 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	2380      	movs	r3, #128	; 0x80
 8002c32:	015b      	lsls	r3, r3, #5
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d109      	bne.n	8002c4c <HAL_UART_Transmit+0x4c>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d105      	bne.n	8002c4c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2201      	movs	r2, #1
 8002c44:	4013      	ands	r3, r2
 8002c46:	d001      	beq.n	8002c4c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e07d      	b.n	8002d48 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2274      	movs	r2, #116	; 0x74
 8002c50:	5c9b      	ldrb	r3, [r3, r2]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_UART_Transmit+0x5a>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e076      	b.n	8002d48 <HAL_UART_Transmit+0x148>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2274      	movs	r2, #116	; 0x74
 8002c5e:	2101      	movs	r1, #1
 8002c60:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2280      	movs	r2, #128	; 0x80
 8002c66:	2100      	movs	r1, #0
 8002c68:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2221      	movs	r2, #33	; 0x21
 8002c6e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c70:	f7fd ff52 	bl	8000b18 <HAL_GetTick>
 8002c74:	0003      	movs	r3, r0
 8002c76:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	1dba      	adds	r2, r7, #6
 8002c7c:	2150      	movs	r1, #80	; 0x50
 8002c7e:	8812      	ldrh	r2, [r2, #0]
 8002c80:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1dba      	adds	r2, r7, #6
 8002c86:	2152      	movs	r1, #82	; 0x52
 8002c88:	8812      	ldrh	r2, [r2, #0]
 8002c8a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	015b      	lsls	r3, r3, #5
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d108      	bne.n	8002caa <HAL_UART_Transmit+0xaa>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d104      	bne.n	8002caa <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	e003      	b.n	8002cb2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2274      	movs	r2, #116	; 0x74
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002cba:	e02c      	b.n	8002d16 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	0013      	movs	r3, r2
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2180      	movs	r1, #128	; 0x80
 8002cca:	f000 ff37 	bl	8003b3c <UART_WaitOnFlagUntilTimeout>
 8002cce:	1e03      	subs	r3, r0, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e038      	b.n	8002d48 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10b      	bne.n	8002cf4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	001a      	movs	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	05d2      	lsls	r2, r2, #23
 8002ce8:	0dd2      	lsrs	r2, r2, #23
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	3302      	adds	r3, #2
 8002cf0:	61bb      	str	r3, [r7, #24]
 8002cf2:	e007      	b.n	8002d04 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	781a      	ldrb	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3301      	adds	r3, #1
 8002d02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2252      	movs	r2, #82	; 0x52
 8002d08:	5a9b      	ldrh	r3, [r3, r2]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b299      	uxth	r1, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2252      	movs	r2, #82	; 0x52
 8002d14:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2252      	movs	r2, #82	; 0x52
 8002d1a:	5a9b      	ldrh	r3, [r3, r2]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1cc      	bne.n	8002cbc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	0013      	movs	r3, r2
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2140      	movs	r1, #64	; 0x40
 8002d30:	f000 ff04 	bl	8003b3c <UART_WaitOnFlagUntilTimeout>
 8002d34:	1e03      	subs	r3, r0, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e005      	b.n	8002d48 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e000      	b.n	8002d48 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002d46:	2302      	movs	r3, #2
  }
}
 8002d48:	0018      	movs	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b008      	add	sp, #32
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	1dbb      	adds	r3, r7, #6
 8002d5c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d62:	2b20      	cmp	r3, #32
 8002d64:	d000      	beq.n	8002d68 <HAL_UART_Transmit_IT+0x18>
 8002d66:	e06a      	b.n	8002e3e <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_UART_Transmit_IT+0x26>
 8002d6e:	1dbb      	adds	r3, r7, #6
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e062      	b.n	8002e40 <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	2380      	movs	r3, #128	; 0x80
 8002d80:	015b      	lsls	r3, r3, #5
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d109      	bne.n	8002d9a <HAL_UART_Transmit_IT+0x4a>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d105      	bne.n	8002d9a <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2201      	movs	r2, #1
 8002d92:	4013      	ands	r3, r2
 8002d94:	d001      	beq.n	8002d9a <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e052      	b.n	8002e40 <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2274      	movs	r2, #116	; 0x74
 8002d9e:	5c9b      	ldrb	r3, [r3, r2]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_UART_Transmit_IT+0x58>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e04b      	b.n	8002e40 <HAL_UART_Transmit_IT+0xf0>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2274      	movs	r2, #116	; 0x74
 8002dac:	2101      	movs	r1, #1
 8002dae:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1dba      	adds	r2, r7, #6
 8002dba:	2150      	movs	r1, #80	; 0x50
 8002dbc:	8812      	ldrh	r2, [r2, #0]
 8002dbe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	1dba      	adds	r2, r7, #6
 8002dc4:	2152      	movs	r1, #82	; 0x52
 8002dc6:	8812      	ldrh	r2, [r2, #0]
 8002dc8:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2280      	movs	r2, #128	; 0x80
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2221      	movs	r2, #33	; 0x21
 8002ddc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	015b      	lsls	r3, r3, #5
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d107      	bne.n	8002dfa <HAL_UART_Transmit_IT+0xaa>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d103      	bne.n	8002dfa <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <HAL_UART_Transmit_IT+0xf8>)
 8002df6:	669a      	str	r2, [r3, #104]	; 0x68
 8002df8:	e002      	b.n	8002e00 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <HAL_UART_Transmit_IT+0xfc>)
 8002dfe:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2274      	movs	r2, #116	; 0x74
 8002e04:	2100      	movs	r1, #0
 8002e06:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e08:	f3ef 8310 	mrs	r3, PRIMASK
 8002e0c:	613b      	str	r3, [r7, #16]
  return(result);
 8002e0e:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	2301      	movs	r3, #1
 8002e14:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f383 8810 	msr	PRIMASK, r3
}
 8002e1c:	46c0      	nop			; (mov r8, r8)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2180      	movs	r1, #128	; 0x80
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	f383 8810 	msr	PRIMASK, r3
}
 8002e38:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e000      	b.n	8002e40 <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 8002e3e:	2302      	movs	r3, #2
  }
}
 8002e40:	0018      	movs	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b008      	add	sp, #32
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	08003e69 	.word	0x08003e69
 8002e4c:	08003db7 	.word	0x08003db7

08002e50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e50:	b590      	push	{r4, r7, lr}
 8002e52:	b0ab      	sub	sp, #172	; 0xac
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	22a4      	movs	r2, #164	; 0xa4
 8002e60:	18b9      	adds	r1, r7, r2
 8002e62:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	20a0      	movs	r0, #160	; 0xa0
 8002e6c:	1839      	adds	r1, r7, r0
 8002e6e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	219c      	movs	r1, #156	; 0x9c
 8002e78:	1879      	adds	r1, r7, r1
 8002e7a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e7c:	0011      	movs	r1, r2
 8002e7e:	18bb      	adds	r3, r7, r2
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a99      	ldr	r2, [pc, #612]	; (80030e8 <HAL_UART_IRQHandler+0x298>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	2298      	movs	r2, #152	; 0x98
 8002e88:	18bc      	adds	r4, r7, r2
 8002e8a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002e8c:	18bb      	adds	r3, r7, r2
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d114      	bne.n	8002ebe <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e94:	187b      	adds	r3, r7, r1
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d00f      	beq.n	8002ebe <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e9e:	183b      	adds	r3, r7, r0
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d00a      	beq.n	8002ebe <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d100      	bne.n	8002eb2 <HAL_UART_IRQHandler+0x62>
 8002eb0:	e298      	b.n	80033e4 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	0010      	movs	r0, r2
 8002eba:	4798      	blx	r3
      }
      return;
 8002ebc:	e292      	b.n	80033e4 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ebe:	2398      	movs	r3, #152	; 0x98
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d100      	bne.n	8002eca <HAL_UART_IRQHandler+0x7a>
 8002ec8:	e114      	b.n	80030f4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002eca:	239c      	movs	r3, #156	; 0x9c
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d106      	bne.n	8002ee4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ed6:	23a0      	movs	r3, #160	; 0xa0
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a83      	ldr	r2, [pc, #524]	; (80030ec <HAL_UART_IRQHandler+0x29c>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d100      	bne.n	8002ee4 <HAL_UART_IRQHandler+0x94>
 8002ee2:	e107      	b.n	80030f4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ee4:	23a4      	movs	r3, #164	; 0xa4
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2201      	movs	r2, #1
 8002eec:	4013      	ands	r3, r2
 8002eee:	d012      	beq.n	8002f16 <HAL_UART_IRQHandler+0xc6>
 8002ef0:	23a0      	movs	r3, #160	; 0xa0
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4013      	ands	r3, r2
 8002efc:	d00b      	beq.n	8002f16 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2201      	movs	r2, #1
 8002f04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2280      	movs	r2, #128	; 0x80
 8002f0a:	589b      	ldr	r3, [r3, r2]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2180      	movs	r1, #128	; 0x80
 8002f14:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f16:	23a4      	movs	r3, #164	; 0xa4
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d011      	beq.n	8002f46 <HAL_UART_IRQHandler+0xf6>
 8002f22:	239c      	movs	r3, #156	; 0x9c
 8002f24:	18fb      	adds	r3, r7, r3
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d00b      	beq.n	8002f46 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2202      	movs	r2, #2
 8002f34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2280      	movs	r2, #128	; 0x80
 8002f3a:	589b      	ldr	r3, [r3, r2]
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2180      	movs	r1, #128	; 0x80
 8002f44:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f46:	23a4      	movs	r3, #164	; 0xa4
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d011      	beq.n	8002f76 <HAL_UART_IRQHandler+0x126>
 8002f52:	239c      	movs	r3, #156	; 0x9c
 8002f54:	18fb      	adds	r3, r7, r3
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d00b      	beq.n	8002f76 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2204      	movs	r2, #4
 8002f64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2280      	movs	r2, #128	; 0x80
 8002f6a:	589b      	ldr	r3, [r3, r2]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2180      	movs	r1, #128	; 0x80
 8002f74:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f76:	23a4      	movs	r3, #164	; 0xa4
 8002f78:	18fb      	adds	r3, r7, r3
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2208      	movs	r2, #8
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d017      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f82:	23a0      	movs	r3, #160	; 0xa0
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d105      	bne.n	8002f9a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f8e:	239c      	movs	r3, #156	; 0x9c
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2201      	movs	r2, #1
 8002f96:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f98:	d00b      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2208      	movs	r2, #8
 8002fa0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2280      	movs	r2, #128	; 0x80
 8002fa6:	589b      	ldr	r3, [r3, r2]
 8002fa8:	2208      	movs	r2, #8
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2180      	movs	r1, #128	; 0x80
 8002fb0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002fb2:	23a4      	movs	r3, #164	; 0xa4
 8002fb4:	18fb      	adds	r3, r7, r3
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d013      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x198>
 8002fc0:	23a0      	movs	r3, #160	; 0xa0
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	04db      	lsls	r3, r3, #19
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d00c      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2280      	movs	r2, #128	; 0x80
 8002fd4:	0112      	lsls	r2, r2, #4
 8002fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2280      	movs	r2, #128	; 0x80
 8002fdc:	589b      	ldr	r3, [r3, r2]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2180      	movs	r1, #128	; 0x80
 8002fe6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2280      	movs	r2, #128	; 0x80
 8002fec:	589b      	ldr	r3, [r3, r2]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d100      	bne.n	8002ff4 <HAL_UART_IRQHandler+0x1a4>
 8002ff2:	e1f9      	b.n	80033e8 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ff4:	23a4      	movs	r3, #164	; 0xa4
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d00e      	beq.n	800301e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003000:	23a0      	movs	r3, #160	; 0xa0
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2220      	movs	r2, #32
 8003008:	4013      	ands	r3, r2
 800300a:	d008      	beq.n	800301e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003010:	2b00      	cmp	r3, #0
 8003012:	d004      	beq.n	800301e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	0010      	movs	r0, r2
 800301c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2280      	movs	r2, #128	; 0x80
 8003022:	589b      	ldr	r3, [r3, r2]
 8003024:	2194      	movs	r1, #148	; 0x94
 8003026:	187a      	adds	r2, r7, r1
 8003028:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2240      	movs	r2, #64	; 0x40
 8003032:	4013      	ands	r3, r2
 8003034:	2b40      	cmp	r3, #64	; 0x40
 8003036:	d004      	beq.n	8003042 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003038:	187b      	adds	r3, r7, r1
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2228      	movs	r2, #40	; 0x28
 800303e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003040:	d047      	beq.n	80030d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	0018      	movs	r0, r3
 8003046:	f000 fe3d 	bl	8003cc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2240      	movs	r2, #64	; 0x40
 8003052:	4013      	ands	r3, r2
 8003054:	2b40      	cmp	r3, #64	; 0x40
 8003056:	d137      	bne.n	80030c8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003058:	f3ef 8310 	mrs	r3, PRIMASK
 800305c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800305e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003060:	2090      	movs	r0, #144	; 0x90
 8003062:	183a      	adds	r2, r7, r0
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	2301      	movs	r3, #1
 8003068:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800306c:	f383 8810 	msr	PRIMASK, r3
}
 8003070:	46c0      	nop			; (mov r8, r8)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2140      	movs	r1, #64	; 0x40
 800307e:	438a      	bics	r2, r1
 8003080:	609a      	str	r2, [r3, #8]
 8003082:	183b      	adds	r3, r7, r0
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003088:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800308a:	f383 8810 	msr	PRIMASK, r3
}
 800308e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003094:	2b00      	cmp	r3, #0
 8003096:	d012      	beq.n	80030be <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309c:	4a14      	ldr	r2, [pc, #80]	; (80030f0 <HAL_UART_IRQHandler+0x2a0>)
 800309e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a4:	0018      	movs	r0, r3
 80030a6:	f7fd fe5f 	bl	8000d68 <HAL_DMA_Abort_IT>
 80030aa:	1e03      	subs	r3, r0, #0
 80030ac:	d01a      	beq.n	80030e4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b8:	0018      	movs	r0, r3
 80030ba:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030bc:	e012      	b.n	80030e4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	0018      	movs	r0, r3
 80030c2:	f000 f9a7 	bl	8003414 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c6:	e00d      	b.n	80030e4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	0018      	movs	r0, r3
 80030cc:	f000 f9a2 	bl	8003414 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d0:	e008      	b.n	80030e4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	0018      	movs	r0, r3
 80030d6:	f000 f99d 	bl	8003414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2280      	movs	r2, #128	; 0x80
 80030de:	2100      	movs	r1, #0
 80030e0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80030e2:	e181      	b.n	80033e8 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e4:	46c0      	nop			; (mov r8, r8)
    return;
 80030e6:	e17f      	b.n	80033e8 <HAL_UART_IRQHandler+0x598>
 80030e8:	0000080f 	.word	0x0000080f
 80030ec:	04000120 	.word	0x04000120
 80030f0:	08003d89 	.word	0x08003d89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d000      	beq.n	80030fe <HAL_UART_IRQHandler+0x2ae>
 80030fc:	e133      	b.n	8003366 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030fe:	23a4      	movs	r3, #164	; 0xa4
 8003100:	18fb      	adds	r3, r7, r3
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2210      	movs	r2, #16
 8003106:	4013      	ands	r3, r2
 8003108:	d100      	bne.n	800310c <HAL_UART_IRQHandler+0x2bc>
 800310a:	e12c      	b.n	8003366 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800310c:	23a0      	movs	r3, #160	; 0xa0
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2210      	movs	r2, #16
 8003114:	4013      	ands	r3, r2
 8003116:	d100      	bne.n	800311a <HAL_UART_IRQHandler+0x2ca>
 8003118:	e125      	b.n	8003366 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2210      	movs	r2, #16
 8003120:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	2240      	movs	r2, #64	; 0x40
 800312a:	4013      	ands	r3, r2
 800312c:	2b40      	cmp	r3, #64	; 0x40
 800312e:	d000      	beq.n	8003132 <HAL_UART_IRQHandler+0x2e2>
 8003130:	e09d      	b.n	800326e <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	217e      	movs	r1, #126	; 0x7e
 800313c:	187b      	adds	r3, r7, r1
 800313e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003140:	187b      	adds	r3, r7, r1
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d100      	bne.n	800314a <HAL_UART_IRQHandler+0x2fa>
 8003148:	e150      	b.n	80033ec <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2258      	movs	r2, #88	; 0x58
 800314e:	5a9b      	ldrh	r3, [r3, r2]
 8003150:	187a      	adds	r2, r7, r1
 8003152:	8812      	ldrh	r2, [r2, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d300      	bcc.n	800315a <HAL_UART_IRQHandler+0x30a>
 8003158:	e148      	b.n	80033ec <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	187a      	adds	r2, r7, r1
 800315e:	215a      	movs	r1, #90	; 0x5a
 8003160:	8812      	ldrh	r2, [r2, #0]
 8003162:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2220      	movs	r2, #32
 800316e:	4013      	ands	r3, r2
 8003170:	d16e      	bne.n	8003250 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003172:	f3ef 8310 	mrs	r3, PRIMASK
 8003176:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800317a:	67bb      	str	r3, [r7, #120]	; 0x78
 800317c:	2301      	movs	r3, #1
 800317e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003182:	f383 8810 	msr	PRIMASK, r3
}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	499a      	ldr	r1, [pc, #616]	; (80033fc <HAL_UART_IRQHandler+0x5ac>)
 8003194:	400a      	ands	r2, r1
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800319a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800319c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319e:	f383 8810 	msr	PRIMASK, r3
}
 80031a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031a4:	f3ef 8310 	mrs	r3, PRIMASK
 80031a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80031aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ac:	677b      	str	r3, [r7, #116]	; 0x74
 80031ae:	2301      	movs	r3, #1
 80031b0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031b4:	f383 8810 	msr	PRIMASK, r3
}
 80031b8:	46c0      	nop			; (mov r8, r8)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2101      	movs	r1, #1
 80031c6:	438a      	bics	r2, r1
 80031c8:	609a      	str	r2, [r3, #8]
 80031ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031cc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031d0:	f383 8810 	msr	PRIMASK, r3
}
 80031d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031d6:	f3ef 8310 	mrs	r3, PRIMASK
 80031da:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80031dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031de:	673b      	str	r3, [r7, #112]	; 0x70
 80031e0:	2301      	movs	r3, #1
 80031e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031e6:	f383 8810 	msr	PRIMASK, r3
}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2140      	movs	r1, #64	; 0x40
 80031f8:	438a      	bics	r2, r1
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031fe:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003202:	f383 8810 	msr	PRIMASK, r3
}
 8003206:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2220      	movs	r2, #32
 800320c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003214:	f3ef 8310 	mrs	r3, PRIMASK
 8003218:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800321a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800321c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800321e:	2301      	movs	r3, #1
 8003220:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003224:	f383 8810 	msr	PRIMASK, r3
}
 8003228:	46c0      	nop			; (mov r8, r8)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2110      	movs	r1, #16
 8003236:	438a      	bics	r2, r1
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800323c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800323e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003240:	f383 8810 	msr	PRIMASK, r3
}
 8003244:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324a:	0018      	movs	r0, r3
 800324c:	f7fd fd4c 	bl	8000ce8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2258      	movs	r2, #88	; 0x58
 8003254:	5a9a      	ldrh	r2, [r3, r2]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	215a      	movs	r1, #90	; 0x5a
 800325a:	5a5b      	ldrh	r3, [r3, r1]
 800325c:	b29b      	uxth	r3, r3
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	b29a      	uxth	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	0011      	movs	r1, r2
 8003266:	0018      	movs	r0, r3
 8003268:	f000 f8dc 	bl	8003424 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800326c:	e0be      	b.n	80033ec <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2258      	movs	r2, #88	; 0x58
 8003272:	5a99      	ldrh	r1, [r3, r2]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	225a      	movs	r2, #90	; 0x5a
 8003278:	5a9b      	ldrh	r3, [r3, r2]
 800327a:	b29a      	uxth	r2, r3
 800327c:	208e      	movs	r0, #142	; 0x8e
 800327e:	183b      	adds	r3, r7, r0
 8003280:	1a8a      	subs	r2, r1, r2
 8003282:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	225a      	movs	r2, #90	; 0x5a
 8003288:	5a9b      	ldrh	r3, [r3, r2]
 800328a:	b29b      	uxth	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d100      	bne.n	8003292 <HAL_UART_IRQHandler+0x442>
 8003290:	e0ae      	b.n	80033f0 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8003292:	183b      	adds	r3, r7, r0
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d100      	bne.n	800329c <HAL_UART_IRQHandler+0x44c>
 800329a:	e0a9      	b.n	80033f0 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800329c:	f3ef 8310 	mrs	r3, PRIMASK
 80032a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80032a2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032a4:	2488      	movs	r4, #136	; 0x88
 80032a6:	193a      	adds	r2, r7, r4
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	2301      	movs	r3, #1
 80032ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f383 8810 	msr	PRIMASK, r3
}
 80032b4:	46c0      	nop			; (mov r8, r8)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	494f      	ldr	r1, [pc, #316]	; (8003400 <HAL_UART_IRQHandler+0x5b0>)
 80032c2:	400a      	ands	r2, r1
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	193b      	adds	r3, r7, r4
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f383 8810 	msr	PRIMASK, r3
}
 80032d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032d4:	f3ef 8310 	mrs	r3, PRIMASK
 80032d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80032da:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032dc:	2484      	movs	r4, #132	; 0x84
 80032de:	193a      	adds	r2, r7, r4
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	2301      	movs	r3, #1
 80032e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f383 8810 	msr	PRIMASK, r3
}
 80032ec:	46c0      	nop			; (mov r8, r8)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2101      	movs	r1, #1
 80032fa:	438a      	bics	r2, r1
 80032fc:	609a      	str	r2, [r3, #8]
 80032fe:	193b      	adds	r3, r7, r4
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	f383 8810 	msr	PRIMASK, r3
}
 800330a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2220      	movs	r2, #32
 8003310:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800331e:	f3ef 8310 	mrs	r3, PRIMASK
 8003322:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003326:	2480      	movs	r4, #128	; 0x80
 8003328:	193a      	adds	r2, r7, r4
 800332a:	6013      	str	r3, [r2, #0]
 800332c:	2301      	movs	r3, #1
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003332:	f383 8810 	msr	PRIMASK, r3
}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2110      	movs	r1, #16
 8003344:	438a      	bics	r2, r1
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	193b      	adds	r3, r7, r4
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	f383 8810 	msr	PRIMASK, r3
}
 8003354:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003356:	183b      	adds	r3, r7, r0
 8003358:	881a      	ldrh	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	0011      	movs	r1, r2
 800335e:	0018      	movs	r0, r3
 8003360:	f000 f860 	bl	8003424 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003364:	e044      	b.n	80033f0 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003366:	23a4      	movs	r3, #164	; 0xa4
 8003368:	18fb      	adds	r3, r7, r3
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	035b      	lsls	r3, r3, #13
 8003370:	4013      	ands	r3, r2
 8003372:	d010      	beq.n	8003396 <HAL_UART_IRQHandler+0x546>
 8003374:	239c      	movs	r3, #156	; 0x9c
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	03db      	lsls	r3, r3, #15
 800337e:	4013      	ands	r3, r2
 8003380:	d009      	beq.n	8003396 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2280      	movs	r2, #128	; 0x80
 8003388:	0352      	lsls	r2, r2, #13
 800338a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	0018      	movs	r0, r3
 8003390:	f000 fdf3 	bl	8003f7a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003394:	e02f      	b.n	80033f6 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003396:	23a4      	movs	r3, #164	; 0xa4
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2280      	movs	r2, #128	; 0x80
 800339e:	4013      	ands	r3, r2
 80033a0:	d00f      	beq.n	80033c2 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80033a2:	23a0      	movs	r3, #160	; 0xa0
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2280      	movs	r2, #128	; 0x80
 80033aa:	4013      	ands	r3, r2
 80033ac:	d009      	beq.n	80033c2 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d01e      	beq.n	80033f4 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	0010      	movs	r0, r2
 80033be:	4798      	blx	r3
    }
    return;
 80033c0:	e018      	b.n	80033f4 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033c2:	23a4      	movs	r3, #164	; 0xa4
 80033c4:	18fb      	adds	r3, r7, r3
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2240      	movs	r2, #64	; 0x40
 80033ca:	4013      	ands	r3, r2
 80033cc:	d013      	beq.n	80033f6 <HAL_UART_IRQHandler+0x5a6>
 80033ce:	23a0      	movs	r3, #160	; 0xa0
 80033d0:	18fb      	adds	r3, r7, r3
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2240      	movs	r2, #64	; 0x40
 80033d6:	4013      	ands	r3, r2
 80033d8:	d00d      	beq.n	80033f6 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	0018      	movs	r0, r3
 80033de:	f000 fda1 	bl	8003f24 <UART_EndTransmit_IT>
    return;
 80033e2:	e008      	b.n	80033f6 <HAL_UART_IRQHandler+0x5a6>
      return;
 80033e4:	46c0      	nop			; (mov r8, r8)
 80033e6:	e006      	b.n	80033f6 <HAL_UART_IRQHandler+0x5a6>
    return;
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	e004      	b.n	80033f6 <HAL_UART_IRQHandler+0x5a6>
      return;
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	e002      	b.n	80033f6 <HAL_UART_IRQHandler+0x5a6>
      return;
 80033f0:	46c0      	nop			; (mov r8, r8)
 80033f2:	e000      	b.n	80033f6 <HAL_UART_IRQHandler+0x5a6>
    return;
 80033f4:	46c0      	nop			; (mov r8, r8)
  }

}
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b02b      	add	sp, #172	; 0xac
 80033fa:	bd90      	pop	{r4, r7, pc}
 80033fc:	fffffeff 	.word	0xfffffeff
 8003400:	fffffedf 	.word	0xfffffedf

08003404 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800340c:	46c0      	nop			; (mov r8, r8)
 800340e:	46bd      	mov	sp, r7
 8003410:	b002      	add	sp, #8
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800341c:	46c0      	nop			; (mov r8, r8)
 800341e:	46bd      	mov	sp, r7
 8003420:	b002      	add	sp, #8
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	000a      	movs	r2, r1
 800342e:	1cbb      	adds	r3, r7, #2
 8003430:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	46bd      	mov	sp, r7
 8003436:	b002      	add	sp, #8
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800343c:	b5b0      	push	{r4, r5, r7, lr}
 800343e:	b08e      	sub	sp, #56	; 0x38
 8003440:	af00      	add	r7, sp, #0
 8003442:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003444:	231a      	movs	r3, #26
 8003446:	2218      	movs	r2, #24
 8003448:	189b      	adds	r3, r3, r2
 800344a:	19db      	adds	r3, r3, r7
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	431a      	orrs	r2, r3
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	431a      	orrs	r2, r3
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	4313      	orrs	r3, r2
 8003466:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4ac6      	ldr	r2, [pc, #792]	; (8003788 <UART_SetConfig+0x34c>)
 8003470:	4013      	ands	r3, r2
 8003472:	0019      	movs	r1, r3
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800347a:	430a      	orrs	r2, r1
 800347c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	4ac1      	ldr	r2, [pc, #772]	; (800378c <UART_SetConfig+0x350>)
 8003486:	4013      	ands	r3, r2
 8003488:	0019      	movs	r1, r3
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4abb      	ldr	r2, [pc, #748]	; (8003790 <UART_SetConfig+0x354>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d004      	beq.n	80034b0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034ac:	4313      	orrs	r3, r2
 80034ae:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	4ab7      	ldr	r2, [pc, #732]	; (8003794 <UART_SetConfig+0x358>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	0019      	movs	r1, r3
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034c2:	430a      	orrs	r2, r1
 80034c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4ab3      	ldr	r2, [pc, #716]	; (8003798 <UART_SetConfig+0x35c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d131      	bne.n	8003534 <UART_SetConfig+0xf8>
 80034d0:	4bb2      	ldr	r3, [pc, #712]	; (800379c <UART_SetConfig+0x360>)
 80034d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d4:	2203      	movs	r2, #3
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d01d      	beq.n	8003518 <UART_SetConfig+0xdc>
 80034dc:	d823      	bhi.n	8003526 <UART_SetConfig+0xea>
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d00c      	beq.n	80034fc <UART_SetConfig+0xc0>
 80034e2:	d820      	bhi.n	8003526 <UART_SetConfig+0xea>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <UART_SetConfig+0xb2>
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d00e      	beq.n	800350a <UART_SetConfig+0xce>
 80034ec:	e01b      	b.n	8003526 <UART_SetConfig+0xea>
 80034ee:	231b      	movs	r3, #27
 80034f0:	2218      	movs	r2, #24
 80034f2:	189b      	adds	r3, r3, r2
 80034f4:	19db      	adds	r3, r3, r7
 80034f6:	2201      	movs	r2, #1
 80034f8:	701a      	strb	r2, [r3, #0]
 80034fa:	e09c      	b.n	8003636 <UART_SetConfig+0x1fa>
 80034fc:	231b      	movs	r3, #27
 80034fe:	2218      	movs	r2, #24
 8003500:	189b      	adds	r3, r3, r2
 8003502:	19db      	adds	r3, r3, r7
 8003504:	2202      	movs	r2, #2
 8003506:	701a      	strb	r2, [r3, #0]
 8003508:	e095      	b.n	8003636 <UART_SetConfig+0x1fa>
 800350a:	231b      	movs	r3, #27
 800350c:	2218      	movs	r2, #24
 800350e:	189b      	adds	r3, r3, r2
 8003510:	19db      	adds	r3, r3, r7
 8003512:	2204      	movs	r2, #4
 8003514:	701a      	strb	r2, [r3, #0]
 8003516:	e08e      	b.n	8003636 <UART_SetConfig+0x1fa>
 8003518:	231b      	movs	r3, #27
 800351a:	2218      	movs	r2, #24
 800351c:	189b      	adds	r3, r3, r2
 800351e:	19db      	adds	r3, r3, r7
 8003520:	2208      	movs	r2, #8
 8003522:	701a      	strb	r2, [r3, #0]
 8003524:	e087      	b.n	8003636 <UART_SetConfig+0x1fa>
 8003526:	231b      	movs	r3, #27
 8003528:	2218      	movs	r2, #24
 800352a:	189b      	adds	r3, r3, r2
 800352c:	19db      	adds	r3, r3, r7
 800352e:	2210      	movs	r2, #16
 8003530:	701a      	strb	r2, [r3, #0]
 8003532:	e080      	b.n	8003636 <UART_SetConfig+0x1fa>
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a99      	ldr	r2, [pc, #612]	; (80037a0 <UART_SetConfig+0x364>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d131      	bne.n	80035a2 <UART_SetConfig+0x166>
 800353e:	4b97      	ldr	r3, [pc, #604]	; (800379c <UART_SetConfig+0x360>)
 8003540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003542:	220c      	movs	r2, #12
 8003544:	4013      	ands	r3, r2
 8003546:	2b0c      	cmp	r3, #12
 8003548:	d01d      	beq.n	8003586 <UART_SetConfig+0x14a>
 800354a:	d823      	bhi.n	8003594 <UART_SetConfig+0x158>
 800354c:	2b08      	cmp	r3, #8
 800354e:	d00c      	beq.n	800356a <UART_SetConfig+0x12e>
 8003550:	d820      	bhi.n	8003594 <UART_SetConfig+0x158>
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <UART_SetConfig+0x120>
 8003556:	2b04      	cmp	r3, #4
 8003558:	d00e      	beq.n	8003578 <UART_SetConfig+0x13c>
 800355a:	e01b      	b.n	8003594 <UART_SetConfig+0x158>
 800355c:	231b      	movs	r3, #27
 800355e:	2218      	movs	r2, #24
 8003560:	189b      	adds	r3, r3, r2
 8003562:	19db      	adds	r3, r3, r7
 8003564:	2200      	movs	r2, #0
 8003566:	701a      	strb	r2, [r3, #0]
 8003568:	e065      	b.n	8003636 <UART_SetConfig+0x1fa>
 800356a:	231b      	movs	r3, #27
 800356c:	2218      	movs	r2, #24
 800356e:	189b      	adds	r3, r3, r2
 8003570:	19db      	adds	r3, r3, r7
 8003572:	2202      	movs	r2, #2
 8003574:	701a      	strb	r2, [r3, #0]
 8003576:	e05e      	b.n	8003636 <UART_SetConfig+0x1fa>
 8003578:	231b      	movs	r3, #27
 800357a:	2218      	movs	r2, #24
 800357c:	189b      	adds	r3, r3, r2
 800357e:	19db      	adds	r3, r3, r7
 8003580:	2204      	movs	r2, #4
 8003582:	701a      	strb	r2, [r3, #0]
 8003584:	e057      	b.n	8003636 <UART_SetConfig+0x1fa>
 8003586:	231b      	movs	r3, #27
 8003588:	2218      	movs	r2, #24
 800358a:	189b      	adds	r3, r3, r2
 800358c:	19db      	adds	r3, r3, r7
 800358e:	2208      	movs	r2, #8
 8003590:	701a      	strb	r2, [r3, #0]
 8003592:	e050      	b.n	8003636 <UART_SetConfig+0x1fa>
 8003594:	231b      	movs	r3, #27
 8003596:	2218      	movs	r2, #24
 8003598:	189b      	adds	r3, r3, r2
 800359a:	19db      	adds	r3, r3, r7
 800359c:	2210      	movs	r2, #16
 800359e:	701a      	strb	r2, [r3, #0]
 80035a0:	e049      	b.n	8003636 <UART_SetConfig+0x1fa>
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a7a      	ldr	r2, [pc, #488]	; (8003790 <UART_SetConfig+0x354>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d13e      	bne.n	800362a <UART_SetConfig+0x1ee>
 80035ac:	4b7b      	ldr	r3, [pc, #492]	; (800379c <UART_SetConfig+0x360>)
 80035ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035b0:	23c0      	movs	r3, #192	; 0xc0
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	4013      	ands	r3, r2
 80035b6:	22c0      	movs	r2, #192	; 0xc0
 80035b8:	0112      	lsls	r2, r2, #4
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d027      	beq.n	800360e <UART_SetConfig+0x1d2>
 80035be:	22c0      	movs	r2, #192	; 0xc0
 80035c0:	0112      	lsls	r2, r2, #4
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d82a      	bhi.n	800361c <UART_SetConfig+0x1e0>
 80035c6:	2280      	movs	r2, #128	; 0x80
 80035c8:	0112      	lsls	r2, r2, #4
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d011      	beq.n	80035f2 <UART_SetConfig+0x1b6>
 80035ce:	2280      	movs	r2, #128	; 0x80
 80035d0:	0112      	lsls	r2, r2, #4
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d822      	bhi.n	800361c <UART_SetConfig+0x1e0>
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d004      	beq.n	80035e4 <UART_SetConfig+0x1a8>
 80035da:	2280      	movs	r2, #128	; 0x80
 80035dc:	00d2      	lsls	r2, r2, #3
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00e      	beq.n	8003600 <UART_SetConfig+0x1c4>
 80035e2:	e01b      	b.n	800361c <UART_SetConfig+0x1e0>
 80035e4:	231b      	movs	r3, #27
 80035e6:	2218      	movs	r2, #24
 80035e8:	189b      	adds	r3, r3, r2
 80035ea:	19db      	adds	r3, r3, r7
 80035ec:	2200      	movs	r2, #0
 80035ee:	701a      	strb	r2, [r3, #0]
 80035f0:	e021      	b.n	8003636 <UART_SetConfig+0x1fa>
 80035f2:	231b      	movs	r3, #27
 80035f4:	2218      	movs	r2, #24
 80035f6:	189b      	adds	r3, r3, r2
 80035f8:	19db      	adds	r3, r3, r7
 80035fa:	2202      	movs	r2, #2
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	e01a      	b.n	8003636 <UART_SetConfig+0x1fa>
 8003600:	231b      	movs	r3, #27
 8003602:	2218      	movs	r2, #24
 8003604:	189b      	adds	r3, r3, r2
 8003606:	19db      	adds	r3, r3, r7
 8003608:	2204      	movs	r2, #4
 800360a:	701a      	strb	r2, [r3, #0]
 800360c:	e013      	b.n	8003636 <UART_SetConfig+0x1fa>
 800360e:	231b      	movs	r3, #27
 8003610:	2218      	movs	r2, #24
 8003612:	189b      	adds	r3, r3, r2
 8003614:	19db      	adds	r3, r3, r7
 8003616:	2208      	movs	r2, #8
 8003618:	701a      	strb	r2, [r3, #0]
 800361a:	e00c      	b.n	8003636 <UART_SetConfig+0x1fa>
 800361c:	231b      	movs	r3, #27
 800361e:	2218      	movs	r2, #24
 8003620:	189b      	adds	r3, r3, r2
 8003622:	19db      	adds	r3, r3, r7
 8003624:	2210      	movs	r2, #16
 8003626:	701a      	strb	r2, [r3, #0]
 8003628:	e005      	b.n	8003636 <UART_SetConfig+0x1fa>
 800362a:	231b      	movs	r3, #27
 800362c:	2218      	movs	r2, #24
 800362e:	189b      	adds	r3, r3, r2
 8003630:	19db      	adds	r3, r3, r7
 8003632:	2210      	movs	r2, #16
 8003634:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a55      	ldr	r2, [pc, #340]	; (8003790 <UART_SetConfig+0x354>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d000      	beq.n	8003642 <UART_SetConfig+0x206>
 8003640:	e084      	b.n	800374c <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003642:	231b      	movs	r3, #27
 8003644:	2218      	movs	r2, #24
 8003646:	189b      	adds	r3, r3, r2
 8003648:	19db      	adds	r3, r3, r7
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b08      	cmp	r3, #8
 800364e:	d01d      	beq.n	800368c <UART_SetConfig+0x250>
 8003650:	dc20      	bgt.n	8003694 <UART_SetConfig+0x258>
 8003652:	2b04      	cmp	r3, #4
 8003654:	d015      	beq.n	8003682 <UART_SetConfig+0x246>
 8003656:	dc1d      	bgt.n	8003694 <UART_SetConfig+0x258>
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <UART_SetConfig+0x226>
 800365c:	2b02      	cmp	r3, #2
 800365e:	d005      	beq.n	800366c <UART_SetConfig+0x230>
 8003660:	e018      	b.n	8003694 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003662:	f7fe fb19 	bl	8001c98 <HAL_RCC_GetPCLK1Freq>
 8003666:	0003      	movs	r3, r0
 8003668:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800366a:	e01c      	b.n	80036a6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800366c:	4b4b      	ldr	r3, [pc, #300]	; (800379c <UART_SetConfig+0x360>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2210      	movs	r2, #16
 8003672:	4013      	ands	r3, r2
 8003674:	d002      	beq.n	800367c <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003676:	4b4b      	ldr	r3, [pc, #300]	; (80037a4 <UART_SetConfig+0x368>)
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800367a:	e014      	b.n	80036a6 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 800367c:	4b4a      	ldr	r3, [pc, #296]	; (80037a8 <UART_SetConfig+0x36c>)
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003680:	e011      	b.n	80036a6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003682:	f7fe fa59 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 8003686:	0003      	movs	r3, r0
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800368a:	e00c      	b.n	80036a6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800368c:	2380      	movs	r3, #128	; 0x80
 800368e:	021b      	lsls	r3, r3, #8
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003692:	e008      	b.n	80036a6 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003698:	231a      	movs	r3, #26
 800369a:	2218      	movs	r2, #24
 800369c:	189b      	adds	r3, r3, r2
 800369e:	19db      	adds	r3, r3, r7
 80036a0:	2201      	movs	r2, #1
 80036a2:	701a      	strb	r2, [r3, #0]
        break;
 80036a4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80036a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d100      	bne.n	80036ae <UART_SetConfig+0x272>
 80036ac:	e133      	b.n	8003916 <UART_SetConfig+0x4da>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	0013      	movs	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	189b      	adds	r3, r3, r2
 80036b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d305      	bcc.n	80036ca <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d906      	bls.n	80036d8 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80036ca:	231a      	movs	r3, #26
 80036cc:	2218      	movs	r2, #24
 80036ce:	189b      	adds	r3, r3, r2
 80036d0:	19db      	adds	r3, r3, r7
 80036d2:	2201      	movs	r2, #1
 80036d4:	701a      	strb	r2, [r3, #0]
 80036d6:	e11e      	b.n	8003916 <UART_SetConfig+0x4da>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	6939      	ldr	r1, [r7, #16]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	000b      	movs	r3, r1
 80036e6:	0e1b      	lsrs	r3, r3, #24
 80036e8:	0010      	movs	r0, r2
 80036ea:	0205      	lsls	r5, r0, #8
 80036ec:	431d      	orrs	r5, r3
 80036ee:	000b      	movs	r3, r1
 80036f0:	021c      	lsls	r4, r3, #8
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	085b      	lsrs	r3, r3, #1
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	68b8      	ldr	r0, [r7, #8]
 8003700:	68f9      	ldr	r1, [r7, #12]
 8003702:	1900      	adds	r0, r0, r4
 8003704:	4169      	adcs	r1, r5
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	2300      	movs	r3, #0
 800370e:	607b      	str	r3, [r7, #4]
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f7fc fd8c 	bl	8000230 <__aeabi_uldivmod>
 8003718:	0002      	movs	r2, r0
 800371a:	000b      	movs	r3, r1
 800371c:	0013      	movs	r3, r2
 800371e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003722:	23c0      	movs	r3, #192	; 0xc0
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	429a      	cmp	r2, r3
 8003728:	d309      	bcc.n	800373e <UART_SetConfig+0x302>
 800372a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800372c:	2380      	movs	r3, #128	; 0x80
 800372e:	035b      	lsls	r3, r3, #13
 8003730:	429a      	cmp	r2, r3
 8003732:	d204      	bcs.n	800373e <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800373a:	60da      	str	r2, [r3, #12]
 800373c:	e0eb      	b.n	8003916 <UART_SetConfig+0x4da>
        }
        else
        {
          ret = HAL_ERROR;
 800373e:	231a      	movs	r3, #26
 8003740:	2218      	movs	r2, #24
 8003742:	189b      	adds	r3, r3, r2
 8003744:	19db      	adds	r3, r3, r7
 8003746:	2201      	movs	r2, #1
 8003748:	701a      	strb	r2, [r3, #0]
 800374a:	e0e4      	b.n	8003916 <UART_SetConfig+0x4da>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	69da      	ldr	r2, [r3, #28]
 8003750:	2380      	movs	r3, #128	; 0x80
 8003752:	021b      	lsls	r3, r3, #8
 8003754:	429a      	cmp	r2, r3
 8003756:	d000      	beq.n	800375a <UART_SetConfig+0x31e>
 8003758:	e086      	b.n	8003868 <UART_SetConfig+0x42c>
  {
    switch (clocksource)
 800375a:	231b      	movs	r3, #27
 800375c:	2218      	movs	r2, #24
 800375e:	189b      	adds	r3, r3, r2
 8003760:	19db      	adds	r3, r3, r7
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d837      	bhi.n	80037d8 <UART_SetConfig+0x39c>
 8003768:	009a      	lsls	r2, r3, #2
 800376a:	4b10      	ldr	r3, [pc, #64]	; (80037ac <UART_SetConfig+0x370>)
 800376c:	18d3      	adds	r3, r2, r3
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003772:	f7fe fa91 	bl	8001c98 <HAL_RCC_GetPCLK1Freq>
 8003776:	0003      	movs	r3, r0
 8003778:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800377a:	e036      	b.n	80037ea <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800377c:	f7fe faa2 	bl	8001cc4 <HAL_RCC_GetPCLK2Freq>
 8003780:	0003      	movs	r3, r0
 8003782:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003784:	e031      	b.n	80037ea <UART_SetConfig+0x3ae>
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	efff69f3 	.word	0xefff69f3
 800378c:	ffffcfff 	.word	0xffffcfff
 8003790:	40004800 	.word	0x40004800
 8003794:	fffff4ff 	.word	0xfffff4ff
 8003798:	40013800 	.word	0x40013800
 800379c:	40021000 	.word	0x40021000
 80037a0:	40004400 	.word	0x40004400
 80037a4:	003d0900 	.word	0x003d0900
 80037a8:	00f42400 	.word	0x00f42400
 80037ac:	080040fc 	.word	0x080040fc
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037b0:	4b60      	ldr	r3, [pc, #384]	; (8003934 <UART_SetConfig+0x4f8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2210      	movs	r2, #16
 80037b6:	4013      	ands	r3, r2
 80037b8:	d002      	beq.n	80037c0 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80037ba:	4b5f      	ldr	r3, [pc, #380]	; (8003938 <UART_SetConfig+0x4fc>)
 80037bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80037be:	e014      	b.n	80037ea <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80037c0:	4b5e      	ldr	r3, [pc, #376]	; (800393c <UART_SetConfig+0x500>)
 80037c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037c4:	e011      	b.n	80037ea <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037c6:	f7fe f9b7 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 80037ca:	0003      	movs	r3, r0
 80037cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037ce:	e00c      	b.n	80037ea <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037d0:	2380      	movs	r3, #128	; 0x80
 80037d2:	021b      	lsls	r3, r3, #8
 80037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037d6:	e008      	b.n	80037ea <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80037dc:	231a      	movs	r3, #26
 80037de:	2218      	movs	r2, #24
 80037e0:	189b      	adds	r3, r3, r2
 80037e2:	19db      	adds	r3, r3, r7
 80037e4:	2201      	movs	r2, #1
 80037e6:	701a      	strb	r2, [r3, #0]
        break;
 80037e8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d100      	bne.n	80037f2 <UART_SetConfig+0x3b6>
 80037f0:	e091      	b.n	8003916 <UART_SetConfig+0x4da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f4:	005a      	lsls	r2, r3, #1
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	085b      	lsrs	r3, r3, #1
 80037fc:	18d2      	adds	r2, r2, r3
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	0019      	movs	r1, r3
 8003804:	0010      	movs	r0, r2
 8003806:	f7fc fc87 	bl	8000118 <__udivsi3>
 800380a:	0003      	movs	r3, r0
 800380c:	b29b      	uxth	r3, r3
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003812:	2b0f      	cmp	r3, #15
 8003814:	d921      	bls.n	800385a <UART_SetConfig+0x41e>
 8003816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003818:	2380      	movs	r3, #128	; 0x80
 800381a:	025b      	lsls	r3, r3, #9
 800381c:	429a      	cmp	r2, r3
 800381e:	d21c      	bcs.n	800385a <UART_SetConfig+0x41e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	b29a      	uxth	r2, r3
 8003824:	200e      	movs	r0, #14
 8003826:	2418      	movs	r4, #24
 8003828:	1903      	adds	r3, r0, r4
 800382a:	19db      	adds	r3, r3, r7
 800382c:	210f      	movs	r1, #15
 800382e:	438a      	bics	r2, r1
 8003830:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003834:	085b      	lsrs	r3, r3, #1
 8003836:	b29b      	uxth	r3, r3
 8003838:	2207      	movs	r2, #7
 800383a:	4013      	ands	r3, r2
 800383c:	b299      	uxth	r1, r3
 800383e:	1903      	adds	r3, r0, r4
 8003840:	19db      	adds	r3, r3, r7
 8003842:	1902      	adds	r2, r0, r4
 8003844:	19d2      	adds	r2, r2, r7
 8003846:	8812      	ldrh	r2, [r2, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	1902      	adds	r2, r0, r4
 8003852:	19d2      	adds	r2, r2, r7
 8003854:	8812      	ldrh	r2, [r2, #0]
 8003856:	60da      	str	r2, [r3, #12]
 8003858:	e05d      	b.n	8003916 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 800385a:	231a      	movs	r3, #26
 800385c:	2218      	movs	r2, #24
 800385e:	189b      	adds	r3, r3, r2
 8003860:	19db      	adds	r3, r3, r7
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
 8003866:	e056      	b.n	8003916 <UART_SetConfig+0x4da>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003868:	231b      	movs	r3, #27
 800386a:	2218      	movs	r2, #24
 800386c:	189b      	adds	r3, r3, r2
 800386e:	19db      	adds	r3, r3, r7
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b08      	cmp	r3, #8
 8003874:	d822      	bhi.n	80038bc <UART_SetConfig+0x480>
 8003876:	009a      	lsls	r2, r3, #2
 8003878:	4b31      	ldr	r3, [pc, #196]	; (8003940 <UART_SetConfig+0x504>)
 800387a:	18d3      	adds	r3, r2, r3
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003880:	f7fe fa0a 	bl	8001c98 <HAL_RCC_GetPCLK1Freq>
 8003884:	0003      	movs	r3, r0
 8003886:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003888:	e021      	b.n	80038ce <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800388a:	f7fe fa1b 	bl	8001cc4 <HAL_RCC_GetPCLK2Freq>
 800388e:	0003      	movs	r3, r0
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003892:	e01c      	b.n	80038ce <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003894:	4b27      	ldr	r3, [pc, #156]	; (8003934 <UART_SetConfig+0x4f8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2210      	movs	r2, #16
 800389a:	4013      	ands	r3, r2
 800389c:	d002      	beq.n	80038a4 <UART_SetConfig+0x468>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800389e:	4b26      	ldr	r3, [pc, #152]	; (8003938 <UART_SetConfig+0x4fc>)
 80038a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80038a2:	e014      	b.n	80038ce <UART_SetConfig+0x492>
          pclk = (uint32_t) HSI_VALUE;
 80038a4:	4b25      	ldr	r3, [pc, #148]	; (800393c <UART_SetConfig+0x500>)
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038a8:	e011      	b.n	80038ce <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038aa:	f7fe f945 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 80038ae:	0003      	movs	r3, r0
 80038b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038b2:	e00c      	b.n	80038ce <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038b4:	2380      	movs	r3, #128	; 0x80
 80038b6:	021b      	lsls	r3, r3, #8
 80038b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038ba:	e008      	b.n	80038ce <UART_SetConfig+0x492>
      default:
        pclk = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80038c0:	231a      	movs	r3, #26
 80038c2:	2218      	movs	r2, #24
 80038c4:	189b      	adds	r3, r3, r2
 80038c6:	19db      	adds	r3, r3, r7
 80038c8:	2201      	movs	r2, #1
 80038ca:	701a      	strb	r2, [r3, #0]
        break;
 80038cc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80038ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d020      	beq.n	8003916 <UART_SetConfig+0x4da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	085a      	lsrs	r2, r3, #1
 80038da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038dc:	18d2      	adds	r2, r2, r3
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	0019      	movs	r1, r3
 80038e4:	0010      	movs	r0, r2
 80038e6:	f7fc fc17 	bl	8000118 <__udivsi3>
 80038ea:	0003      	movs	r3, r0
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f2:	2b0f      	cmp	r3, #15
 80038f4:	d909      	bls.n	800390a <UART_SetConfig+0x4ce>
 80038f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038f8:	2380      	movs	r3, #128	; 0x80
 80038fa:	025b      	lsls	r3, r3, #9
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d204      	bcs.n	800390a <UART_SetConfig+0x4ce>
      {
        huart->Instance->BRR = usartdiv;
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003906:	60da      	str	r2, [r3, #12]
 8003908:	e005      	b.n	8003916 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 800390a:	231a      	movs	r3, #26
 800390c:	2218      	movs	r2, #24
 800390e:	189b      	adds	r3, r3, r2
 8003910:	19db      	adds	r3, r3, r7
 8003912:	2201      	movs	r2, #1
 8003914:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	2200      	movs	r2, #0
 800391a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	2200      	movs	r2, #0
 8003920:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003922:	231a      	movs	r3, #26
 8003924:	2218      	movs	r2, #24
 8003926:	189b      	adds	r3, r3, r2
 8003928:	19db      	adds	r3, r3, r7
 800392a:	781b      	ldrb	r3, [r3, #0]
}
 800392c:	0018      	movs	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	b00e      	add	sp, #56	; 0x38
 8003932:	bdb0      	pop	{r4, r5, r7, pc}
 8003934:	40021000 	.word	0x40021000
 8003938:	003d0900 	.word	0x003d0900
 800393c:	00f42400 	.word	0x00f42400
 8003940:	08004120 	.word	0x08004120

08003944 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	2201      	movs	r2, #1
 8003952:	4013      	ands	r3, r2
 8003954:	d00b      	beq.n	800396e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	4a4a      	ldr	r2, [pc, #296]	; (8003a88 <UART_AdvFeatureConfig+0x144>)
 800395e:	4013      	ands	r3, r2
 8003960:	0019      	movs	r1, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	2202      	movs	r2, #2
 8003974:	4013      	ands	r3, r2
 8003976:	d00b      	beq.n	8003990 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	4a43      	ldr	r2, [pc, #268]	; (8003a8c <UART_AdvFeatureConfig+0x148>)
 8003980:	4013      	ands	r3, r2
 8003982:	0019      	movs	r1, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	2204      	movs	r2, #4
 8003996:	4013      	ands	r3, r2
 8003998:	d00b      	beq.n	80039b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	4a3b      	ldr	r2, [pc, #236]	; (8003a90 <UART_AdvFeatureConfig+0x14c>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	0019      	movs	r1, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	2208      	movs	r2, #8
 80039b8:	4013      	ands	r3, r2
 80039ba:	d00b      	beq.n	80039d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4a34      	ldr	r2, [pc, #208]	; (8003a94 <UART_AdvFeatureConfig+0x150>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	0019      	movs	r1, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	2210      	movs	r2, #16
 80039da:	4013      	ands	r3, r2
 80039dc:	d00b      	beq.n	80039f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	4a2c      	ldr	r2, [pc, #176]	; (8003a98 <UART_AdvFeatureConfig+0x154>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	0019      	movs	r1, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	2220      	movs	r2, #32
 80039fc:	4013      	ands	r3, r2
 80039fe:	d00b      	beq.n	8003a18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	4a25      	ldr	r2, [pc, #148]	; (8003a9c <UART_AdvFeatureConfig+0x158>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	0019      	movs	r1, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	2240      	movs	r2, #64	; 0x40
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d01d      	beq.n	8003a5e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	4a1d      	ldr	r2, [pc, #116]	; (8003aa0 <UART_AdvFeatureConfig+0x15c>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	0019      	movs	r1, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a3e:	2380      	movs	r3, #128	; 0x80
 8003a40:	035b      	lsls	r3, r3, #13
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d10b      	bne.n	8003a5e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	4a15      	ldr	r2, [pc, #84]	; (8003aa4 <UART_AdvFeatureConfig+0x160>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	0019      	movs	r1, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	2280      	movs	r2, #128	; 0x80
 8003a64:	4013      	ands	r3, r2
 8003a66:	d00b      	beq.n	8003a80 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	4a0e      	ldr	r2, [pc, #56]	; (8003aa8 <UART_AdvFeatureConfig+0x164>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	0019      	movs	r1, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]
  }
}
 8003a80:	46c0      	nop			; (mov r8, r8)
 8003a82:	46bd      	mov	sp, r7
 8003a84:	b002      	add	sp, #8
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	fffdffff 	.word	0xfffdffff
 8003a8c:	fffeffff 	.word	0xfffeffff
 8003a90:	fffbffff 	.word	0xfffbffff
 8003a94:	ffff7fff 	.word	0xffff7fff
 8003a98:	ffffefff 	.word	0xffffefff
 8003a9c:	ffffdfff 	.word	0xffffdfff
 8003aa0:	ffefffff 	.word	0xffefffff
 8003aa4:	ff9fffff 	.word	0xff9fffff
 8003aa8:	fff7ffff 	.word	0xfff7ffff

08003aac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2280      	movs	r2, #128	; 0x80
 8003ab8:	2100      	movs	r1, #0
 8003aba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003abc:	f7fd f82c 	bl	8000b18 <HAL_GetTick>
 8003ac0:	0003      	movs	r3, r0
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2208      	movs	r2, #8
 8003acc:	4013      	ands	r3, r2
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d10c      	bne.n	8003aec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2280      	movs	r2, #128	; 0x80
 8003ad6:	0391      	lsls	r1, r2, #14
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	4a17      	ldr	r2, [pc, #92]	; (8003b38 <UART_CheckIdleState+0x8c>)
 8003adc:	9200      	str	r2, [sp, #0]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f000 f82c 	bl	8003b3c <UART_WaitOnFlagUntilTimeout>
 8003ae4:	1e03      	subs	r3, r0, #0
 8003ae6:	d001      	beq.n	8003aec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e021      	b.n	8003b30 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2204      	movs	r2, #4
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d10c      	bne.n	8003b14 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2280      	movs	r2, #128	; 0x80
 8003afe:	03d1      	lsls	r1, r2, #15
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	4a0d      	ldr	r2, [pc, #52]	; (8003b38 <UART_CheckIdleState+0x8c>)
 8003b04:	9200      	str	r2, [sp, #0]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f000 f818 	bl	8003b3c <UART_WaitOnFlagUntilTimeout>
 8003b0c:	1e03      	subs	r3, r0, #0
 8003b0e:	d001      	beq.n	8003b14 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e00d      	b.n	8003b30 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2220      	movs	r2, #32
 8003b18:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2274      	movs	r2, #116	; 0x74
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	0018      	movs	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b004      	add	sp, #16
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	01ffffff 	.word	0x01ffffff

08003b3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b094      	sub	sp, #80	; 0x50
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	1dfb      	adds	r3, r7, #7
 8003b4a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b4c:	e0a3      	b.n	8003c96 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b50:	3301      	adds	r3, #1
 8003b52:	d100      	bne.n	8003b56 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003b54:	e09f      	b.n	8003c96 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b56:	f7fc ffdf 	bl	8000b18 <HAL_GetTick>
 8003b5a:	0002      	movs	r2, r0
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d302      	bcc.n	8003b6c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d13d      	bne.n	8003be8 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b70:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b74:	647b      	str	r3, [r7, #68]	; 0x44
 8003b76:	2301      	movs	r3, #1
 8003b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7c:	f383 8810 	msr	PRIMASK, r3
}
 8003b80:	46c0      	nop			; (mov r8, r8)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	494c      	ldr	r1, [pc, #304]	; (8003cc0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003b8e:	400a      	ands	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b94:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	f383 8810 	msr	PRIMASK, r3
}
 8003b9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003ba2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ba8:	2301      	movs	r3, #1
 8003baa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bae:	f383 8810 	msr	PRIMASK, r3
}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	438a      	bics	r2, r1
 8003bc2:	609a      	str	r2, [r3, #8]
 8003bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bca:	f383 8810 	msr	PRIMASK, r3
}
 8003bce:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2274      	movs	r2, #116	; 0x74
 8003be0:	2100      	movs	r1, #0
 8003be2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e067      	b.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2204      	movs	r2, #4
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d050      	beq.n	8003c96 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	69da      	ldr	r2, [r3, #28]
 8003bfa:	2380      	movs	r3, #128	; 0x80
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	401a      	ands	r2, r3
 8003c00:	2380      	movs	r3, #128	; 0x80
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d146      	bne.n	8003c96 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2280      	movs	r2, #128	; 0x80
 8003c0e:	0112      	lsls	r2, r2, #4
 8003c10:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c12:	f3ef 8310 	mrs	r3, PRIMASK
 8003c16:	613b      	str	r3, [r7, #16]
  return(result);
 8003c18:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f383 8810 	msr	PRIMASK, r3
}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4923      	ldr	r1, [pc, #140]	; (8003cc0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003c34:	400a      	ands	r2, r1
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	f383 8810 	msr	PRIMASK, r3
}
 8003c42:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c44:	f3ef 8310 	mrs	r3, PRIMASK
 8003c48:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c4a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c4e:	2301      	movs	r3, #1
 8003c50:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	f383 8810 	msr	PRIMASK, r3
}
 8003c58:	46c0      	nop			; (mov r8, r8)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2101      	movs	r1, #1
 8003c66:	438a      	bics	r2, r1
 8003c68:	609a      	str	r2, [r3, #8]
 8003c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	f383 8810 	msr	PRIMASK, r3
}
 8003c74:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2280      	movs	r2, #128	; 0x80
 8003c86:	2120      	movs	r1, #32
 8003c88:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2274      	movs	r2, #116	; 0x74
 8003c8e:	2100      	movs	r1, #0
 8003c90:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e010      	b.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	425a      	negs	r2, r3
 8003ca6:	4153      	adcs	r3, r2
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	001a      	movs	r2, r3
 8003cac:	1dfb      	adds	r3, r7, #7
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d100      	bne.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003cb4:	e74b      	b.n	8003b4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	0018      	movs	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b014      	add	sp, #80	; 0x50
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	fffffe5f 	.word	0xfffffe5f

08003cc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08e      	sub	sp, #56	; 0x38
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd0:	617b      	str	r3, [r7, #20]
  return(result);
 8003cd2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	f383 8810 	msr	PRIMASK, r3
}
 8003ce0:	46c0      	nop			; (mov r8, r8)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4925      	ldr	r1, [pc, #148]	; (8003d84 <UART_EndRxTransfer+0xc0>)
 8003cee:	400a      	ands	r2, r1
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f383 8810 	msr	PRIMASK, r3
}
 8003cfc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cfe:	f3ef 8310 	mrs	r3, PRIMASK
 8003d02:	623b      	str	r3, [r7, #32]
  return(result);
 8003d04:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d06:	633b      	str	r3, [r7, #48]	; 0x30
 8003d08:	2301      	movs	r3, #1
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	f383 8810 	msr	PRIMASK, r3
}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2101      	movs	r1, #1
 8003d20:	438a      	bics	r2, r1
 8003d22:	609a      	str	r2, [r3, #8]
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2a:	f383 8810 	msr	PRIMASK, r3
}
 8003d2e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d118      	bne.n	8003d6a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d38:	f3ef 8310 	mrs	r3, PRIMASK
 8003d3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d3e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d42:	2301      	movs	r3, #1
 8003d44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f383 8810 	msr	PRIMASK, r3
}
 8003d4c:	46c0      	nop			; (mov r8, r8)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2110      	movs	r1, #16
 8003d5a:	438a      	bics	r2, r1
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f383 8810 	msr	PRIMASK, r3
}
 8003d68:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003d7c:	46c0      	nop			; (mov r8, r8)
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b00e      	add	sp, #56	; 0x38
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	fffffedf 	.word	0xfffffedf

08003d88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	225a      	movs	r2, #90	; 0x5a
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2252      	movs	r2, #82	; 0x52
 8003da2:	2100      	movs	r1, #0
 8003da4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7ff fb33 	bl	8003414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b004      	add	sp, #16
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b08a      	sub	sp, #40	; 0x28
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dc2:	2b21      	cmp	r3, #33	; 0x21
 8003dc4:	d14c      	bne.n	8003e60 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2252      	movs	r2, #82	; 0x52
 8003dca:	5a9b      	ldrh	r3, [r3, r2]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d132      	bne.n	8003e38 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
 8003ddc:	2301      	movs	r3, #1
 8003dde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f383 8810 	msr	PRIMASK, r3
}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2180      	movs	r1, #128	; 0x80
 8003df4:	438a      	bics	r2, r1
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f383 8810 	msr	PRIMASK, r3
}
 8003e02:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e04:	f3ef 8310 	mrs	r3, PRIMASK
 8003e08:	617b      	str	r3, [r7, #20]
  return(result);
 8003e0a:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e0c:	623b      	str	r3, [r7, #32]
 8003e0e:	2301      	movs	r3, #1
 8003e10:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	f383 8810 	msr	PRIMASK, r3
}
 8003e18:	46c0      	nop			; (mov r8, r8)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2140      	movs	r1, #64	; 0x40
 8003e26:	430a      	orrs	r2, r1
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	f383 8810 	msr	PRIMASK, r3
}
 8003e34:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003e36:	e013      	b.n	8003e60 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3c:	781a      	ldrb	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2252      	movs	r2, #82	; 0x52
 8003e52:	5a9b      	ldrh	r3, [r3, r2]
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b299      	uxth	r1, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2252      	movs	r2, #82	; 0x52
 8003e5e:	5299      	strh	r1, [r3, r2]
}
 8003e60:	46c0      	nop			; (mov r8, r8)
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b00a      	add	sp, #40	; 0x28
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08c      	sub	sp, #48	; 0x30
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e74:	2b21      	cmp	r3, #33	; 0x21
 8003e76:	d151      	bne.n	8003f1c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2252      	movs	r2, #82	; 0x52
 8003e7c:	5a9b      	ldrh	r3, [r3, r2]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d132      	bne.n	8003eea <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e84:	f3ef 8310 	mrs	r3, PRIMASK
 8003e88:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e8e:	2301      	movs	r3, #1
 8003e90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f383 8810 	msr	PRIMASK, r3
}
 8003e98:	46c0      	nop			; (mov r8, r8)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2180      	movs	r1, #128	; 0x80
 8003ea6:	438a      	bics	r2, r1
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f383 8810 	msr	PRIMASK, r3
}
 8003eb4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8003eba:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ebc:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	f383 8810 	msr	PRIMASK, r3
}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2140      	movs	r1, #64	; 0x40
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	f383 8810 	msr	PRIMASK, r3
}
 8003ee6:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003ee8:	e018      	b.n	8003f1c <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eee:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	001a      	movs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	05d2      	lsls	r2, r2, #23
 8003efc:	0dd2      	lsrs	r2, r2, #23
 8003efe:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f04:	1c9a      	adds	r2, r3, #2
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2252      	movs	r2, #82	; 0x52
 8003f0e:	5a9b      	ldrh	r3, [r3, r2]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b299      	uxth	r1, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2252      	movs	r2, #82	; 0x52
 8003f1a:	5299      	strh	r1, [r3, r2]
}
 8003f1c:	46c0      	nop			; (mov r8, r8)
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	b00c      	add	sp, #48	; 0x30
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f30:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f32:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	2301      	movs	r3, #1
 8003f38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f383 8810 	msr	PRIMASK, r3
}
 8003f40:	46c0      	nop			; (mov r8, r8)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2140      	movs	r1, #64	; 0x40
 8003f4e:	438a      	bics	r2, r1
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f383 8810 	msr	PRIMASK, r3
}
 8003f5c:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2220      	movs	r2, #32
 8003f62:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f7ff fa49 	bl	8003404 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	46bd      	mov	sp, r7
 8003f76:	b006      	add	sp, #24
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b002      	add	sp, #8
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <__libc_init_array>:
 8003f8c:	b570      	push	{r4, r5, r6, lr}
 8003f8e:	2600      	movs	r6, #0
 8003f90:	4d0c      	ldr	r5, [pc, #48]	; (8003fc4 <__libc_init_array+0x38>)
 8003f92:	4c0d      	ldr	r4, [pc, #52]	; (8003fc8 <__libc_init_array+0x3c>)
 8003f94:	1b64      	subs	r4, r4, r5
 8003f96:	10a4      	asrs	r4, r4, #2
 8003f98:	42a6      	cmp	r6, r4
 8003f9a:	d109      	bne.n	8003fb0 <__libc_init_array+0x24>
 8003f9c:	2600      	movs	r6, #0
 8003f9e:	f000 f821 	bl	8003fe4 <_init>
 8003fa2:	4d0a      	ldr	r5, [pc, #40]	; (8003fcc <__libc_init_array+0x40>)
 8003fa4:	4c0a      	ldr	r4, [pc, #40]	; (8003fd0 <__libc_init_array+0x44>)
 8003fa6:	1b64      	subs	r4, r4, r5
 8003fa8:	10a4      	asrs	r4, r4, #2
 8003faa:	42a6      	cmp	r6, r4
 8003fac:	d105      	bne.n	8003fba <__libc_init_array+0x2e>
 8003fae:	bd70      	pop	{r4, r5, r6, pc}
 8003fb0:	00b3      	lsls	r3, r6, #2
 8003fb2:	58eb      	ldr	r3, [r5, r3]
 8003fb4:	4798      	blx	r3
 8003fb6:	3601      	adds	r6, #1
 8003fb8:	e7ee      	b.n	8003f98 <__libc_init_array+0xc>
 8003fba:	00b3      	lsls	r3, r6, #2
 8003fbc:	58eb      	ldr	r3, [r5, r3]
 8003fbe:	4798      	blx	r3
 8003fc0:	3601      	adds	r6, #1
 8003fc2:	e7f2      	b.n	8003faa <__libc_init_array+0x1e>
 8003fc4:	0800414c 	.word	0x0800414c
 8003fc8:	0800414c 	.word	0x0800414c
 8003fcc:	0800414c 	.word	0x0800414c
 8003fd0:	08004150 	.word	0x08004150

08003fd4 <memset>:
 8003fd4:	0003      	movs	r3, r0
 8003fd6:	1882      	adds	r2, r0, r2
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d100      	bne.n	8003fde <memset+0xa>
 8003fdc:	4770      	bx	lr
 8003fde:	7019      	strb	r1, [r3, #0]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	e7f9      	b.n	8003fd8 <memset+0x4>

08003fe4 <_init>:
 8003fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe6:	46c0      	nop			; (mov r8, r8)
 8003fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fea:	bc08      	pop	{r3}
 8003fec:	469e      	mov	lr, r3
 8003fee:	4770      	bx	lr

08003ff0 <_fini>:
 8003ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff2:	46c0      	nop			; (mov r8, r8)
 8003ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ff6:	bc08      	pop	{r3}
 8003ff8:	469e      	mov	lr, r3
 8003ffa:	4770      	bx	lr
